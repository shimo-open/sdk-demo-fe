!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.ShimoJSSDK=t():e.ShimoJSSDK=t()}(self,(function(){return(()=>{var e={9874:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e){this.alphabet=e,this.lookup=this.createLookupTable()}return e.getBytes=function(e){for(var t=[],r=0;r<e.length;r++){var n=e.charCodeAt(r);t.push(255&n)}return t},e.getString=function(e){return String.fromCharCode.apply(this,e)},e.createInstance=function(){return this.createInstanceWithGmpCharacterSet()},e.createInstanceWithGmpCharacterSet=function(){return new e(e.CharacterSets.GMP)},e.createInstanceWithInvertedCharacterSet=function(){return new e(e.CharacterSets.INVERTED)},e.translate=function(e,t){for(var r=[],n=0,o=e;n<o.length;n++){var i=o[n];r.push(t[i])}return r},e.convert=function(e,t,r){for(var n=[],o=e;o.length>0;){for(var i=[],a=0,s=0,c=o;s<c.length;s++){var u=(255&c[s])+a*t,l=(u-u%r)/r;a=u%r,(i.length>0||l>0)&&i.push(l)}n.push(a),o=i}for(var f=0;f<e.length-1&&0===e[f];f++)n.push(0);return n.reverse()},e.prototype.encode=function(t){var r=e.convert(t,e.STANDARD_BASE,e.TARGET_BASE);return e.translate(r,this.alphabet)},e.prototype.decode=function(t){var r=e.translate(t,this.lookup);return e.convert(r,e.TARGET_BASE,e.STANDARD_BASE)},e.prototype.encodeStr=function(t){return e.getString(this.encode(e.getBytes(t)))},e.prototype.decodeStr=function(t){return e.getString(this.decode(e.getBytes(t)))},e.prototype.createLookupTable=function(){for(var e=new Array(256),t=0;t<256;t++)e[this.alphabet[t]]=255&t;return e},e.CharacterSets={GMP:["0".charCodeAt(0),"1".charCodeAt(0),"2".charCodeAt(0),"3".charCodeAt(0),"4".charCodeAt(0),"5".charCodeAt(0),"6".charCodeAt(0),"7".charCodeAt(0),"8".charCodeAt(0),"9".charCodeAt(0),"A".charCodeAt(0),"B".charCodeAt(0),"C".charCodeAt(0),"D".charCodeAt(0),"E".charCodeAt(0),"F".charCodeAt(0),"G".charCodeAt(0),"H".charCodeAt(0),"I".charCodeAt(0),"J".charCodeAt(0),"K".charCodeAt(0),"L".charCodeAt(0),"M".charCodeAt(0),"N".charCodeAt(0),"O".charCodeAt(0),"P".charCodeAt(0),"Q".charCodeAt(0),"R".charCodeAt(0),"S".charCodeAt(0),"T".charCodeAt(0),"U".charCodeAt(0),"V".charCodeAt(0),"W".charCodeAt(0),"X".charCodeAt(0),"Y".charCodeAt(0),"Z".charCodeAt(0),"a".charCodeAt(0),"b".charCodeAt(0),"c".charCodeAt(0),"d".charCodeAt(0),"e".charCodeAt(0),"f".charCodeAt(0),"g".charCodeAt(0),"h".charCodeAt(0),"i".charCodeAt(0),"j".charCodeAt(0),"k".charCodeAt(0),"l".charCodeAt(0),"m".charCodeAt(0),"n".charCodeAt(0),"o".charCodeAt(0),"p".charCodeAt(0),"q".charCodeAt(0),"r".charCodeAt(0),"s".charCodeAt(0),"t".charCodeAt(0),"u".charCodeAt(0),"v".charCodeAt(0),"w".charCodeAt(0),"x".charCodeAt(0),"y".charCodeAt(0),"z".charCodeAt(0)],INVERTED:["0".charCodeAt(0),"1".charCodeAt(0),"2".charCodeAt(0),"3".charCodeAt(0),"4".charCodeAt(0),"5".charCodeAt(0),"6".charCodeAt(0),"7".charCodeAt(0),"8".charCodeAt(0),"9".charCodeAt(0),"a".charCodeAt(0),"b".charCodeAt(0),"c".charCodeAt(0),"d".charCodeAt(0),"e".charCodeAt(0),"f".charCodeAt(0),"g".charCodeAt(0),"h".charCodeAt(0),"i".charCodeAt(0),"j".charCodeAt(0),"k".charCodeAt(0),"l".charCodeAt(0),"m".charCodeAt(0),"n".charCodeAt(0),"o".charCodeAt(0),"p".charCodeAt(0),"q".charCodeAt(0),"r".charCodeAt(0),"s".charCodeAt(0),"t".charCodeAt(0),"u".charCodeAt(0),"v".charCodeAt(0),"w".charCodeAt(0),"x".charCodeAt(0),"y".charCodeAt(0),"z".charCodeAt(0),"A".charCodeAt(0),"B".charCodeAt(0),"C".charCodeAt(0),"D".charCodeAt(0),"E".charCodeAt(0),"F".charCodeAt(0),"G".charCodeAt(0),"H".charCodeAt(0),"I".charCodeAt(0),"J".charCodeAt(0),"K".charCodeAt(0),"L".charCodeAt(0),"M".charCodeAt(0),"N".charCodeAt(0),"O".charCodeAt(0),"P".charCodeAt(0),"Q".charCodeAt(0),"R".charCodeAt(0),"S".charCodeAt(0),"T".charCodeAt(0),"U".charCodeAt(0),"V".charCodeAt(0),"W".charCodeAt(0),"X".charCodeAt(0),"Y".charCodeAt(0),"Z".charCodeAt(0)]},e.STANDARD_BASE=256,e.TARGET_BASE=62,e}();t.default=r},3462:(e,t,r)=>{r(6699);var n=r(2649);e.exports=n("Array","includes")},9116:(e,t,r)=>{r(9601);var n=r(857);e.exports=n.Object.assign},7633:(e,t,r)=>{r(9170),r(6992),r(1539),r(8674),r(7922),r(4668),r(7727),r(8783);var n=r(857);e.exports=n.Promise},4577:(e,t,r)=>{var n=r(6575);e.exports=n},7671:(e,t,r)=>{var n=r(4977);e.exports=n},3867:(e,t,r)=>{var n=r(1150);r(8628),r(7314),r(7479),r(6290),e.exports=n},1357:(e,t,r)=>{var n=r(8149);e.exports=n},9662:(e,t,r)=>{var n=r(7854),o=r(614),i=r(6330),a=n.TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a function")}},9483:(e,t,r)=>{var n=r(7854),o=r(4411),i=r(6330),a=n.TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not a constructor")}},6077:(e,t,r)=>{var n=r(7854),o=r(614),i=n.String,a=n.TypeError;e.exports=function(e){if("object"==typeof e||o(e))return e;throw a("Can't set "+i(e)+" as a prototype")}},1223:(e,t,r)=>{var n=r(5112),o=r(30),i=r(3070),a=n("unscopables"),s=Array.prototype;null==s[a]&&i.f(s,a,{configurable:!0,value:o(null)}),e.exports=function(e){s[a][e]=!0}},5787:(e,t,r)=>{var n=r(7854),o=r(7976),i=n.TypeError;e.exports=function(e,t){if(o(t,e))return e;throw i("Incorrect invocation")}},9670:(e,t,r)=>{var n=r(7854),o=r(111),i=n.String,a=n.TypeError;e.exports=function(e){if(o(e))return e;throw a(i(e)+" is not an object")}},8457:(e,t,r)=>{"use strict";var n=r(7854),o=r(9974),i=r(6916),a=r(7908),s=r(3411),c=r(7659),u=r(4411),l=r(6244),f=r(6135),d=r(8554),h=r(1246),p=n.Array;e.exports=function(e){var t=a(e),r=u(this),n=arguments.length,v=n>1?arguments[1]:void 0,m=void 0!==v;m&&(v=o(v,n>2?arguments[2]:void 0));var y,g,b,w,C,S,_=h(t),E=0;if(!_||this==p&&c(_))for(y=l(t),g=r?new this(y):p(y);y>E;E++)S=m?v(t[E],E):t[E],f(g,E,S);else for(C=(w=d(t,_)).next,g=r?new this:[];!(b=i(C,w)).done;E++)S=m?s(w,v,[b.value,E],!0):b.value,f(g,E,S);return g.length=E,g}},1318:(e,t,r)=>{var n=r(5656),o=r(1400),i=r(6244),a=function(e){return function(t,r,a){var s,c=n(t),u=i(c),l=o(a,u);if(e&&r!=r){for(;u>l;)if((s=c[l++])!=s)return!0}else for(;u>l;l++)if((e||l in c)&&c[l]===r)return e||l||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},206:(e,t,r)=>{var n=r(1702);e.exports=n([].slice)},4362:(e,t,r)=>{var n=r(206),o=Math.floor,i=function(e,t){var r=e.length,c=o(r/2);return r<8?a(e,t):s(e,i(n(e,0,c),t),i(n(e,c),t),t)},a=function(e,t){for(var r,n,o=e.length,i=1;i<o;){for(n=i,r=e[i];n&&t(e[n-1],r)>0;)e[n]=e[--n];n!==i++&&(e[n]=r)}return e},s=function(e,t,r,n){for(var o=t.length,i=r.length,a=0,s=0;a<o||s<i;)e[a+s]=a<o&&s<i?n(t[a],r[s])<=0?t[a++]:r[s++]:a<o?t[a++]:r[s++];return e};e.exports=i},3411:(e,t,r)=>{var n=r(9670),o=r(9212);e.exports=function(e,t,r,i){try{return i?t(n(r)[0],r[1]):t(r)}catch(t){o(e,"throw",t)}}},7072:(e,t,r)=>{var n=r(5112)("iterator"),o=!1;try{var i=0,a={next:function(){return{done:!!i++}},return:function(){o=!0}};a[n]=function(){return this},Array.from(a,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!o)return!1;var r=!1;try{var i={};i[n]=function(){return{next:function(){return{done:r=!0}}}},e(i)}catch(e){}return r}},4326:(e,t,r)=>{var n=r(1702),o=n({}.toString),i=n("".slice);e.exports=function(e){return i(o(e),8,-1)}},648:(e,t,r)=>{var n=r(7854),o=r(1694),i=r(614),a=r(4326),s=r(5112)("toStringTag"),c=n.Object,u="Arguments"==a(function(){return arguments}());e.exports=o?a:function(e){var t,r,n;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(r=function(e,t){try{return e[t]}catch(e){}}(t=c(e),s))?r:u?a(t):"Object"==(n=a(t))&&i(t.callee)?"Arguments":n}},7741:(e,t,r)=>{var n=r(1702),o=r(206),i=n("".replace),a=n("".split),s=n([].join),c=String(Error("zxcasd").stack),u=/\n\s*at [^:]*:[^\n]*/,l=u.test(c),f=/@[^\n]*\n/.test(c)&&!/zxcasd/.test(c);e.exports=function(e,t){if("string"!=typeof e)return e;if(l)for(;t--;)e=i(e,u,"");else if(f)return s(o(a(e,"\n"),t),"\n");return e}},9920:(e,t,r)=>{var n=r(2597),o=r(3887),i=r(1236),a=r(3070);e.exports=function(e,t){for(var r=o(t),s=a.f,c=i.f,u=0;u<r.length;u++){var l=r[u];n(e,l)||s(e,l,c(t,l))}}},8544:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},4994:(e,t,r)=>{"use strict";var n=r(3383).IteratorPrototype,o=r(30),i=r(9114),a=r(8003),s=r(7497),c=function(){return this};e.exports=function(e,t,r){var u=t+" Iterator";return e.prototype=o(n,{next:i(1,r)}),a(e,u,!1,!0),s[u]=c,e}},8880:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9114);e.exports=n?function(e,t,r){return o.f(e,t,i(1,r))}:function(e,t,r){return e[t]=r,e}},9114:e=>{e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},6135:(e,t,r)=>{"use strict";var n=r(4948),o=r(3070),i=r(9114);e.exports=function(e,t,r){var a=n(t);a in e?o.f(e,a,i(0,r)):e[a]=r}},654:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),i=r(1913),a=r(6530),s=r(614),c=r(4994),u=r(9518),l=r(7674),f=r(8003),d=r(8880),h=r(1320),p=r(5112),v=r(7497),m=r(3383),y=a.PROPER,g=a.CONFIGURABLE,b=m.IteratorPrototype,w=m.BUGGY_SAFARI_ITERATORS,C=p("iterator"),S="keys",_="values",E="entries",O=function(){return this};e.exports=function(e,t,r,a,p,m,x){c(r,t,a);var A,P,M,k=function(e){if(e===p&&R)return R;if(!w&&e in T)return T[e];switch(e){case S:case _:case E:return function(){return new r(this,e)}}return function(){return new r(this)}},j=t+" Iterator",L=!1,T=e.prototype,I=T[C]||T["@@iterator"]||p&&T[p],R=!w&&I||k(p),F="Array"==t&&T.entries||I;if(F&&(A=u(F.call(new e)))!==Object.prototype&&A.next&&(i||u(A)===b||(l?l(A,b):s(A[C])||h(A,C,O)),f(A,j,!0,!0),i&&(v[j]=O)),y&&p==_&&I&&I.name!==_&&(!i&&g?d(T,"name",_):(L=!0,R=function(){return o(I,this)})),p)if(P={values:k(_),keys:m?R:k(S),entries:k(E)},x)for(M in P)(w||L||!(M in T))&&h(T,M,P[M]);else n({target:t,proto:!0,forced:w||L},P);return i&&!x||T[C]===R||h(T,C,R,{name:p}),v[t]=R,P}},9781:(e,t,r)=>{var n=r(7293);e.exports=!n((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},317:(e,t,r)=>{var n=r(7854),o=r(111),i=n.document,a=o(i)&&o(i.createElement);e.exports=function(e){return a?i.createElement(e):{}}},8324:e=>{e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},8509:(e,t,r)=>{var n=r(317)("span").classList,o=n&&n.constructor&&n.constructor.prototype;e.exports=o===Object.prototype?void 0:o},7871:e=>{e.exports="object"==typeof window},1528:(e,t,r)=>{var n=r(8113),o=r(7854);e.exports=/ipad|iphone|ipod/i.test(n)&&void 0!==o.Pebble},6833:(e,t,r)=>{var n=r(8113);e.exports=/(?:ipad|iphone|ipod).*applewebkit/i.test(n)},5268:(e,t,r)=>{var n=r(4326),o=r(7854);e.exports="process"==n(o.process)},1036:(e,t,r)=>{var n=r(8113);e.exports=/web0s(?!.*chrome)/i.test(n)},8113:(e,t,r)=>{var n=r(5005);e.exports=n("navigator","userAgent")||""},7392:(e,t,r)=>{var n,o,i=r(7854),a=r(8113),s=i.process,c=i.Deno,u=s&&s.versions||c&&c.version,l=u&&u.v8;l&&(o=(n=l.split("."))[0]>0&&n[0]<4?1:+(n[0]+n[1])),!o&&a&&(!(n=a.match(/Edge\/(\d+)/))||n[1]>=74)&&(n=a.match(/Chrome\/(\d+)/))&&(o=+n[1]),e.exports=o},2649:(e,t,r)=>{var n=r(7854),o=r(1702);e.exports=function(e,t){return o(n[e].prototype[t])}},748:e=>{e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},2914:(e,t,r)=>{var n=r(7293),o=r(9114);e.exports=!n((function(){var e=Error("a");return!("stack"in e)||(Object.defineProperty(e,"stack",o(1,7)),7!==e.stack)}))},2109:(e,t,r)=>{var n=r(7854),o=r(1236).f,i=r(8880),a=r(1320),s=r(3505),c=r(9920),u=r(4705);e.exports=function(e,t){var r,l,f,d,h,p=e.target,v=e.global,m=e.stat;if(r=v?n:m?n[p]||s(p,{}):(n[p]||{}).prototype)for(l in t){if(d=t[l],f=e.noTargetGet?(h=o(r,l))&&h.value:r[l],!u(v?l:p+(m?".":"#")+l,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;c(d,f)}(e.sham||f&&f.sham)&&i(d,"sham",!0),a(r,l,d,e)}}},7293:e=>{e.exports=function(e){try{return!!e()}catch(e){return!0}}},2104:e=>{var t=Function.prototype,r=t.apply,n=t.bind,o=t.call;e.exports="object"==typeof Reflect&&Reflect.apply||(n?o.bind(r):function(){return o.apply(r,arguments)})},9974:(e,t,r)=>{var n=r(1702),o=r(9662),i=n(n.bind);e.exports=function(e,t){return o(e),void 0===t?e:i?i(e,t):function(){return e.apply(t,arguments)}}},6916:e=>{var t=Function.prototype.call;e.exports=t.bind?t.bind(t):function(){return t.apply(t,arguments)}},6530:(e,t,r)=>{var n=r(9781),o=r(2597),i=Function.prototype,a=n&&Object.getOwnPropertyDescriptor,s=o(i,"name"),c=s&&"something"===function(){}.name,u=s&&(!n||n&&a(i,"name").configurable);e.exports={EXISTS:s,PROPER:c,CONFIGURABLE:u}},1702:e=>{var t=Function.prototype,r=t.bind,n=t.call,o=r&&r.bind(n);e.exports=r?function(e){return e&&o(n,e)}:function(e){return e&&function(){return n.apply(e,arguments)}}},5005:(e,t,r)=>{var n=r(7854),o=r(614),i=function(e){return o(e)?e:void 0};e.exports=function(e,t){return arguments.length<2?i(n[e]):n[e]&&n[e][t]}},1246:(e,t,r)=>{var n=r(648),o=r(8173),i=r(7497),a=r(5112)("iterator");e.exports=function(e){if(null!=e)return o(e,a)||o(e,"@@iterator")||i[n(e)]}},8554:(e,t,r)=>{var n=r(7854),o=r(6916),i=r(9662),a=r(9670),s=r(6330),c=r(1246),u=n.TypeError;e.exports=function(e,t){var r=arguments.length<2?c(e):t;if(i(r))return a(o(r,e));throw u(s(e)+" is not iterable")}},8173:(e,t,r)=>{var n=r(9662);e.exports=function(e,t){var r=e[t];return null==r?void 0:n(r)}},7854:(e,t,r)=>{var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof r.g&&r.g)||function(){return this}()||Function("return this")()},2597:(e,t,r)=>{var n=r(1702),o=r(7908),i=n({}.hasOwnProperty);e.exports=Object.hasOwn||function(e,t){return i(o(e),t)}},3501:e=>{e.exports={}},842:(e,t,r)=>{var n=r(7854);e.exports=function(e,t){var r=n.console;r&&r.error&&(1==arguments.length?r.error(e):r.error(e,t))}},490:(e,t,r)=>{var n=r(5005);e.exports=n("document","documentElement")},4664:(e,t,r)=>{var n=r(9781),o=r(7293),i=r(317);e.exports=!n&&!o((function(){return 7!=Object.defineProperty(i("div"),"a",{get:function(){return 7}}).a}))},8361:(e,t,r)=>{var n=r(7854),o=r(1702),i=r(7293),a=r(4326),s=n.Object,c=o("".split);e.exports=i((function(){return!s("z").propertyIsEnumerable(0)}))?function(e){return"String"==a(e)?c(e,""):s(e)}:s},2788:(e,t,r)=>{var n=r(1702),o=r(614),i=r(5465),a=n(Function.toString);o(i.inspectSource)||(i.inspectSource=function(e){return a(e)}),e.exports=i.inspectSource},8340:(e,t,r)=>{var n=r(111),o=r(8880);e.exports=function(e,t){n(t)&&"cause"in t&&o(e,"cause",t.cause)}},9909:(e,t,r)=>{var n,o,i,a=r(8536),s=r(7854),c=r(1702),u=r(111),l=r(8880),f=r(2597),d=r(5465),h=r(6200),p=r(3501),v="Object already initialized",m=s.TypeError,y=s.WeakMap;if(a||d.state){var g=d.state||(d.state=new y),b=c(g.get),w=c(g.has),C=c(g.set);n=function(e,t){if(w(g,e))throw new m(v);return t.facade=e,C(g,e,t),t},o=function(e){return b(g,e)||{}},i=function(e){return w(g,e)}}else{var S=h("state");p[S]=!0,n=function(e,t){if(f(e,S))throw new m(v);return t.facade=e,l(e,S,t),t},o=function(e){return f(e,S)?e[S]:{}},i=function(e){return f(e,S)}}e.exports={set:n,get:o,has:i,enforce:function(e){return i(e)?o(e):n(e,{})},getterFor:function(e){return function(t){var r;if(!u(t)||(r=o(t)).type!==e)throw m("Incompatible receiver, "+e+" required");return r}}}},7659:(e,t,r)=>{var n=r(5112),o=r(7497),i=n("iterator"),a=Array.prototype;e.exports=function(e){return void 0!==e&&(o.Array===e||a[i]===e)}},614:e=>{e.exports=function(e){return"function"==typeof e}},4411:(e,t,r)=>{var n=r(1702),o=r(7293),i=r(614),a=r(648),s=r(5005),c=r(2788),u=function(){},l=[],f=s("Reflect","construct"),d=/^\s*(?:class|function)\b/,h=n(d.exec),p=!d.exec(u),v=function(e){if(!i(e))return!1;try{return f(u,l,e),!0}catch(e){return!1}};e.exports=!f||o((function(){var e;return v(v.call)||!v(Object)||!v((function(){e=!0}))||e}))?function(e){if(!i(e))return!1;switch(a(e)){case"AsyncFunction":case"GeneratorFunction":case"AsyncGeneratorFunction":return!1}return p||!!h(d,c(e))}:v},4705:(e,t,r)=>{var n=r(7293),o=r(614),i=/#|\.prototype\./,a=function(e,t){var r=c[s(e)];return r==l||r!=u&&(o(t)?n(t):!!t)},s=a.normalize=function(e){return String(e).replace(i,".").toLowerCase()},c=a.data={},u=a.NATIVE="N",l=a.POLYFILL="P";e.exports=a},111:(e,t,r)=>{var n=r(614);e.exports=function(e){return"object"==typeof e?null!==e:n(e)}},1913:e=>{e.exports=!1},2190:(e,t,r)=>{var n=r(7854),o=r(5005),i=r(614),a=r(7976),s=r(3307),c=n.Object;e.exports=s?function(e){return"symbol"==typeof e}:function(e){var t=o("Symbol");return i(t)&&a(t.prototype,c(e))}},408:(e,t,r)=>{var n=r(7854),o=r(9974),i=r(6916),a=r(9670),s=r(6330),c=r(7659),u=r(6244),l=r(7976),f=r(8554),d=r(1246),h=r(9212),p=n.TypeError,v=function(e,t){this.stopped=e,this.result=t},m=v.prototype;e.exports=function(e,t,r){var n,y,g,b,w,C,S,_=r&&r.that,E=!(!r||!r.AS_ENTRIES),O=!(!r||!r.IS_ITERATOR),x=!(!r||!r.INTERRUPTED),A=o(t,_),P=function(e){return n&&h(n,"normal",e),new v(!0,e)},M=function(e){return E?(a(e),x?A(e[0],e[1],P):A(e[0],e[1])):x?A(e,P):A(e)};if(O)n=e;else{if(!(y=d(e)))throw p(s(e)+" is not iterable");if(c(y)){for(g=0,b=u(e);b>g;g++)if((w=M(e[g]))&&l(m,w))return w;return new v(!1)}n=f(e,y)}for(C=n.next;!(S=i(C,n)).done;){try{w=M(S.value)}catch(e){h(n,"throw",e)}if("object"==typeof w&&w&&l(m,w))return w}return new v(!1)}},9212:(e,t,r)=>{var n=r(6916),o=r(9670),i=r(8173);e.exports=function(e,t,r){var a,s;o(e);try{if(!(a=i(e,"return"))){if("throw"===t)throw r;return r}a=n(a,e)}catch(e){s=!0,a=e}if("throw"===t)throw r;if(s)throw a;return o(a),r}},3383:(e,t,r)=>{"use strict";var n,o,i,a=r(7293),s=r(614),c=r(30),u=r(9518),l=r(1320),f=r(5112),d=r(1913),h=f("iterator"),p=!1;[].keys&&("next"in(i=[].keys())?(o=u(u(i)))!==Object.prototype&&(n=o):p=!0),null==n||a((function(){var e={};return n[h].call(e)!==e}))?n={}:d&&(n=c(n)),s(n[h])||l(n,h,(function(){return this})),e.exports={IteratorPrototype:n,BUGGY_SAFARI_ITERATORS:p}},7497:e=>{e.exports={}},6244:(e,t,r)=>{var n=r(7466);e.exports=function(e){return n(e.length)}},5948:(e,t,r)=>{var n,o,i,a,s,c,u,l,f=r(7854),d=r(9974),h=r(1236).f,p=r(261).set,v=r(6833),m=r(1528),y=r(1036),g=r(5268),b=f.MutationObserver||f.WebKitMutationObserver,w=f.document,C=f.process,S=f.Promise,_=h(f,"queueMicrotask"),E=_&&_.value;E||(n=function(){var e,t;for(g&&(e=C.domain)&&e.exit();o;){t=o.fn,o=o.next;try{t()}catch(e){throw o?a():i=void 0,e}}i=void 0,e&&e.enter()},v||g||y||!b||!w?!m&&S&&S.resolve?((u=S.resolve(void 0)).constructor=S,l=d(u.then,u),a=function(){l(n)}):g?a=function(){C.nextTick(n)}:(p=d(p,f),a=function(){p(n)}):(s=!0,c=w.createTextNode(""),new b(n).observe(c,{characterData:!0}),a=function(){c.data=s=!s})),e.exports=E||function(e){var t={fn:e,next:void 0};i&&(i.next=t),o||(o=t,a()),i=t}},3366:(e,t,r)=>{var n=r(7854);e.exports=n.Promise},133:(e,t,r)=>{var n=r(7392),o=r(7293);e.exports=!!Object.getOwnPropertySymbols&&!o((function(){var e=Symbol();return!String(e)||!(Object(e)instanceof Symbol)||!Symbol.sham&&n&&n<41}))},590:(e,t,r)=>{var n=r(7293),o=r(5112),i=r(1913),a=o("iterator");e.exports=!n((function(){var e=new URL("b?a=1&b=2&c=3","http://a"),t=e.searchParams,r="";return e.pathname="c%20d",t.forEach((function(e,n){t.delete("b"),r+=n+e})),i&&!e.toJSON||!t.sort||"http://a/c%20d?a=1&c=3"!==e.href||"3"!==t.get("c")||"a=1"!==String(new URLSearchParams("?a=1"))||!t[a]||"a"!==new URL("https://a@b").username||"b"!==new URLSearchParams(new URLSearchParams("a=b")).get("a")||"xn--e1aybc"!==new URL("http://тест").host||"#%D0%B1"!==new URL("http://a#б").hash||"a1c3"!==r||"x"!==new URL("http://x",void 0).host}))},8536:(e,t,r)=>{var n=r(7854),o=r(614),i=r(2788),a=n.WeakMap;e.exports=o(a)&&/native code/.test(i(a))},8523:(e,t,r)=>{"use strict";var n=r(9662),o=function(e){var t,r;this.promise=new e((function(e,n){if(void 0!==t||void 0!==r)throw TypeError("Bad Promise constructor");t=e,r=n})),this.resolve=n(t),this.reject=n(r)};e.exports.f=function(e){return new o(e)}},6277:(e,t,r)=>{var n=r(1340);e.exports=function(e,t){return void 0===e?arguments.length<2?"":t:n(e)}},1574:(e,t,r)=>{"use strict";var n=r(9781),o=r(1702),i=r(6916),a=r(7293),s=r(1956),c=r(5181),u=r(5296),l=r(7908),f=r(8361),d=Object.assign,h=Object.defineProperty,p=o([].concat);e.exports=!d||a((function(){if(n&&1!==d({b:1},d(h({},"a",{enumerable:!0,get:function(){h(this,"b",{value:3,enumerable:!1})}}),{b:2})).b)return!0;var e={},t={},r=Symbol(),o="abcdefghijklmnopqrst";return e[r]=7,o.split("").forEach((function(e){t[e]=e})),7!=d({},e)[r]||s(d({},t)).join("")!=o}))?function(e,t){for(var r=l(e),o=arguments.length,a=1,d=c.f,h=u.f;o>a;)for(var v,m=f(arguments[a++]),y=d?p(s(m),d(m)):s(m),g=y.length,b=0;g>b;)v=y[b++],n&&!i(h,m,v)||(r[v]=m[v]);return r}:d},30:(e,t,r)=>{var n,o=r(9670),i=r(6048),a=r(748),s=r(3501),c=r(490),u=r(317),l=r(6200)("IE_PROTO"),f=function(){},d=function(e){return"<script>"+e+"<\/script>"},h=function(e){e.write(d("")),e.close();var t=e.parentWindow.Object;return e=null,t},p=function(){try{n=new ActiveXObject("htmlfile")}catch(e){}var e,t;p="undefined"!=typeof document?document.domain&&n?h(n):((t=u("iframe")).style.display="none",c.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(d("document.F=Object")),e.close(),e.F):h(n);for(var r=a.length;r--;)delete p.prototype[a[r]];return p()};s[l]=!0,e.exports=Object.create||function(e,t){var r;return null!==e?(f.prototype=o(e),r=new f,f.prototype=null,r[l]=e):r=p(),void 0===t?r:i(r,t)}},6048:(e,t,r)=>{var n=r(9781),o=r(3070),i=r(9670),a=r(5656),s=r(1956);e.exports=n?Object.defineProperties:function(e,t){i(e);for(var r,n=a(t),c=s(t),u=c.length,l=0;u>l;)o.f(e,r=c[l++],n[r]);return e}},3070:(e,t,r)=>{var n=r(7854),o=r(9781),i=r(4664),a=r(9670),s=r(4948),c=n.TypeError,u=Object.defineProperty;t.f=o?u:function(e,t,r){if(a(e),t=s(t),a(r),i)try{return u(e,t,r)}catch(e){}if("get"in r||"set"in r)throw c("Accessors not supported");return"value"in r&&(e[t]=r.value),e}},1236:(e,t,r)=>{var n=r(9781),o=r(6916),i=r(5296),a=r(9114),s=r(5656),c=r(4948),u=r(2597),l=r(4664),f=Object.getOwnPropertyDescriptor;t.f=n?f:function(e,t){if(e=s(e),t=c(t),l)try{return f(e,t)}catch(e){}if(u(e,t))return a(!o(i.f,e,t),e[t])}},8006:(e,t,r)=>{var n=r(6324),o=r(748).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return n(e,o)}},5181:(e,t)=>{t.f=Object.getOwnPropertySymbols},9518:(e,t,r)=>{var n=r(7854),o=r(2597),i=r(614),a=r(7908),s=r(6200),c=r(8544),u=s("IE_PROTO"),l=n.Object,f=l.prototype;e.exports=c?l.getPrototypeOf:function(e){var t=a(e);if(o(t,u))return t[u];var r=t.constructor;return i(r)&&t instanceof r?r.prototype:t instanceof l?f:null}},7976:(e,t,r)=>{var n=r(1702);e.exports=n({}.isPrototypeOf)},6324:(e,t,r)=>{var n=r(1702),o=r(2597),i=r(5656),a=r(1318).indexOf,s=r(3501),c=n([].push);e.exports=function(e,t){var r,n=i(e),u=0,l=[];for(r in n)!o(s,r)&&o(n,r)&&c(l,r);for(;t.length>u;)o(n,r=t[u++])&&(~a(l,r)||c(l,r));return l}},1956:(e,t,r)=>{var n=r(6324),o=r(748);e.exports=Object.keys||function(e){return n(e,o)}},5296:(e,t)=>{"use strict";var r={}.propertyIsEnumerable,n=Object.getOwnPropertyDescriptor,o=n&&!r.call({1:2},1);t.f=o?function(e){var t=n(this,e);return!!t&&t.enumerable}:r},7674:(e,t,r)=>{var n=r(1702),o=r(9670),i=r(6077);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,r={};try{(e=n(Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set))(r,[]),t=r instanceof Array}catch(e){}return function(r,n){return o(r),i(n),t?e(r,n):r.__proto__=n,r}}():void 0)},288:(e,t,r)=>{"use strict";var n=r(1694),o=r(648);e.exports=n?{}.toString:function(){return"[object "+o(this)+"]"}},2140:(e,t,r)=>{var n=r(7854),o=r(6916),i=r(614),a=r(111),s=n.TypeError;e.exports=function(e,t){var r,n;if("string"===t&&i(r=e.toString)&&!a(n=o(r,e)))return n;if(i(r=e.valueOf)&&!a(n=o(r,e)))return n;if("string"!==t&&i(r=e.toString)&&!a(n=o(r,e)))return n;throw s("Can't convert object to primitive value")}},3887:(e,t,r)=>{var n=r(5005),o=r(1702),i=r(8006),a=r(5181),s=r(9670),c=o([].concat);e.exports=n("Reflect","ownKeys")||function(e){var t=i.f(s(e)),r=a.f;return r?c(t,r(e)):t}},857:(e,t,r)=>{var n=r(7854);e.exports=n},2534:e=>{e.exports=function(e){try{return{error:!1,value:e()}}catch(e){return{error:!0,value:e}}}},9478:(e,t,r)=>{var n=r(9670),o=r(111),i=r(8523);e.exports=function(e,t){if(n(e),o(t)&&t.constructor===e)return t;var r=i.f(e);return(0,r.resolve)(t),r.promise}},2248:(e,t,r)=>{var n=r(1320);e.exports=function(e,t,r){for(var o in t)n(e,o,t[o],r);return e}},1320:(e,t,r)=>{var n=r(7854),o=r(614),i=r(2597),a=r(8880),s=r(3505),c=r(2788),u=r(9909),l=r(6530).CONFIGURABLE,f=u.get,d=u.enforce,h=String(String).split("String");(e.exports=function(e,t,r,c){var u,f=!!c&&!!c.unsafe,p=!!c&&!!c.enumerable,v=!!c&&!!c.noTargetGet,m=c&&void 0!==c.name?c.name:t;o(r)&&("Symbol("===String(m).slice(0,7)&&(m="["+String(m).replace(/^Symbol\(([^)]*)\)/,"$1")+"]"),(!i(r,"name")||l&&r.name!==m)&&a(r,"name",m),(u=d(r)).source||(u.source=h.join("string"==typeof m?m:""))),e!==n?(f?!v&&e[t]&&(p=!0):delete e[t],p?e[t]=r:a(e,t,r)):p?e[t]=r:s(t,r)})(Function.prototype,"toString",(function(){return o(this)&&f(this).source||c(this)}))},4488:(e,t,r)=>{var n=r(7854).TypeError;e.exports=function(e){if(null==e)throw n("Can't call method on "+e);return e}},3505:(e,t,r)=>{var n=r(7854),o=Object.defineProperty;e.exports=function(e,t){try{o(n,e,{value:t,configurable:!0,writable:!0})}catch(r){n[e]=t}return t}},6340:(e,t,r)=>{"use strict";var n=r(5005),o=r(3070),i=r(5112),a=r(9781),s=i("species");e.exports=function(e){var t=n(e),r=o.f;a&&t&&!t[s]&&r(t,s,{configurable:!0,get:function(){return this}})}},8003:(e,t,r)=>{var n=r(3070).f,o=r(2597),i=r(5112)("toStringTag");e.exports=function(e,t,r){e&&!o(e=r?e:e.prototype,i)&&n(e,i,{configurable:!0,value:t})}},6200:(e,t,r)=>{var n=r(2309),o=r(9711),i=n("keys");e.exports=function(e){return i[e]||(i[e]=o(e))}},5465:(e,t,r)=>{var n=r(7854),o=r(3505),i="__core-js_shared__",a=n[i]||o(i,{});e.exports=a},2309:(e,t,r)=>{var n=r(1913),o=r(5465);(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.19.1",mode:n?"pure":"global",copyright:"© 2021 Denis Pushkarev (zloirock.ru)"})},6707:(e,t,r)=>{var n=r(9670),o=r(9483),i=r(5112)("species");e.exports=function(e,t){var r,a=n(e).constructor;return void 0===a||null==(r=n(a)[i])?t:o(r)}},8710:(e,t,r)=>{var n=r(1702),o=r(9303),i=r(1340),a=r(4488),s=n("".charAt),c=n("".charCodeAt),u=n("".slice),l=function(e){return function(t,r){var n,l,f=i(a(t)),d=o(r),h=f.length;return d<0||d>=h?e?"":void 0:(n=c(f,d))<55296||n>56319||d+1===h||(l=c(f,d+1))<56320||l>57343?e?s(f,d):n:e?u(f,d,d+2):l-56320+(n-55296<<10)+65536}};e.exports={codeAt:l(!1),charAt:l(!0)}},3197:(e,t,r)=>{"use strict";var n=r(7854),o=r(1702),i=2147483647,a=/[^\0-\u007E]/,s=/[.\u3002\uFF0E\uFF61]/g,c="Overflow: input needs wider integers to process",u=n.RangeError,l=o(s.exec),f=Math.floor,d=String.fromCharCode,h=o("".charCodeAt),p=o([].join),v=o([].push),m=o("".replace),y=o("".split),g=o("".toLowerCase),b=function(e){return e+22+75*(e<26)},w=function(e,t,r){var n=0;for(e=r?f(e/700):e>>1,e+=f(e/t);e>455;n+=36)e=f(e/35);return f(n+36*e/(e+38))},C=function(e){var t,r,n=[],o=(e=function(e){for(var t=[],r=0,n=e.length;r<n;){var o=h(e,r++);if(o>=55296&&o<=56319&&r<n){var i=h(e,r++);56320==(64512&i)?v(t,((1023&o)<<10)+(1023&i)+65536):(v(t,o),r--)}else v(t,o)}return t}(e)).length,a=128,s=0,l=72;for(t=0;t<e.length;t++)(r=e[t])<128&&v(n,d(r));var m=n.length,y=m;for(m&&v(n,"-");y<o;){var g=i;for(t=0;t<e.length;t++)(r=e[t])>=a&&r<g&&(g=r);var C=y+1;if(g-a>f((i-s)/C))throw u(c);for(s+=(g-a)*C,a=g,t=0;t<e.length;t++){if((r=e[t])<a&&++s>i)throw u(c);if(r==a){for(var S=s,_=36;;_+=36){var E=_<=l?1:_>=l+26?26:_-l;if(S<E)break;var O=S-E,x=36-E;v(n,d(b(E+O%x))),S=f(O/x)}v(n,d(b(S))),l=w(s,C,y==m),s=0,++y}}++s,++a}return p(n,"")};e.exports=function(e){var t,r,n=[],o=y(m(g(e),s,"."),".");for(t=0;t<o.length;t++)r=o[t],v(n,l(a,r)?"xn--"+C(r):r);return p(n,".")}},261:(e,t,r)=>{var n,o,i,a,s=r(7854),c=r(2104),u=r(9974),l=r(614),f=r(2597),d=r(7293),h=r(490),p=r(206),v=r(317),m=r(6833),y=r(5268),g=s.setImmediate,b=s.clearImmediate,w=s.process,C=s.Dispatch,S=s.Function,_=s.MessageChannel,E=s.String,O=0,x={};try{n=s.location}catch(e){}var A=function(e){if(f(x,e)){var t=x[e];delete x[e],t()}},P=function(e){return function(){A(e)}},M=function(e){A(e.data)},k=function(e){s.postMessage(E(e),n.protocol+"//"+n.host)};g&&b||(g=function(e){var t=p(arguments,1);return x[++O]=function(){c(l(e)?e:S(e),void 0,t)},o(O),O},b=function(e){delete x[e]},y?o=function(e){w.nextTick(P(e))}:C&&C.now?o=function(e){C.now(P(e))}:_&&!m?(a=(i=new _).port2,i.port1.onmessage=M,o=u(a.postMessage,a)):s.addEventListener&&l(s.postMessage)&&!s.importScripts&&n&&"file:"!==n.protocol&&!d(k)?(o=k,s.addEventListener("message",M,!1)):o="onreadystatechange"in v("script")?function(e){h.appendChild(v("script")).onreadystatechange=function(){h.removeChild(this),A(e)}}:function(e){setTimeout(P(e),0)}),e.exports={set:g,clear:b}},1400:(e,t,r)=>{var n=r(9303),o=Math.max,i=Math.min;e.exports=function(e,t){var r=n(e);return r<0?o(r+t,0):i(r,t)}},5656:(e,t,r)=>{var n=r(8361),o=r(4488);e.exports=function(e){return n(o(e))}},9303:e=>{var t=Math.ceil,r=Math.floor;e.exports=function(e){var n=+e;return n!=n||0===n?0:(n>0?r:t)(n)}},7466:(e,t,r)=>{var n=r(9303),o=Math.min;e.exports=function(e){return e>0?o(n(e),9007199254740991):0}},7908:(e,t,r)=>{var n=r(7854),o=r(4488),i=n.Object;e.exports=function(e){return i(o(e))}},7593:(e,t,r)=>{var n=r(7854),o=r(6916),i=r(111),a=r(2190),s=r(8173),c=r(2140),u=r(5112),l=n.TypeError,f=u("toPrimitive");e.exports=function(e,t){if(!i(e)||a(e))return e;var r,n=s(e,f);if(n){if(void 0===t&&(t="default"),r=o(n,e,t),!i(r)||a(r))return r;throw l("Can't convert object to primitive value")}return void 0===t&&(t="number"),c(e,t)}},4948:(e,t,r)=>{var n=r(7593),o=r(2190);e.exports=function(e){var t=n(e,"string");return o(t)?t:t+""}},1694:(e,t,r)=>{var n={};n[r(5112)("toStringTag")]="z",e.exports="[object z]"===String(n)},1340:(e,t,r)=>{var n=r(7854),o=r(648),i=n.String;e.exports=function(e){if("Symbol"===o(e))throw TypeError("Cannot convert a Symbol value to a string");return i(e)}},6330:(e,t,r)=>{var n=r(7854).String;e.exports=function(e){try{return n(e)}catch(e){return"Object"}}},9711:(e,t,r)=>{var n=r(1702),o=0,i=Math.random(),a=n(1..toString);e.exports=function(e){return"Symbol("+(void 0===e?"":e)+")_"+a(++o+i,36)}},3307:(e,t,r)=>{var n=r(133);e.exports=n&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},5112:(e,t,r)=>{var n=r(7854),o=r(2309),i=r(2597),a=r(9711),s=r(133),c=r(3307),u=o("wks"),l=n.Symbol,f=l&&l.for,d=c?l:l&&l.withoutSetter||a;e.exports=function(e){if(!i(u,e)||!s&&"string"!=typeof u[e]){var t="Symbol."+e;s&&i(l,e)?u[e]=l[e]:u[e]=c&&f?f(t):d(t)}return u[e]}},9170:(e,t,r)=>{"use strict";var n=r(2109),o=r(7854),i=r(7976),a=r(9518),s=r(7674),c=r(9920),u=r(30),l=r(8880),f=r(9114),d=r(7741),h=r(8340),p=r(408),v=r(6277),m=r(5112),y=r(2914),g=m("toStringTag"),b=o.Error,w=[].push,C=function(e,t){var r,n=arguments.length>2?arguments[2]:void 0,o=i(S,this);s?r=s(new b(void 0),o?a(this):S):(r=o?this:u(S),l(r,g,"Error")),l(r,"message",v(t,"")),y&&l(r,"stack",d(r.stack,1)),h(r,n);var c=[];return p(e,w,{that:c}),l(r,"errors",c),r};s?s(C,b):c(C,b);var S=C.prototype=u(b.prototype,{constructor:f(1,C),message:f(1,""),name:f(1,"AggregateError")});n({global:!0},{AggregateError:C})},6699:(e,t,r)=>{"use strict";var n=r(2109),o=r(1318).includes,i=r(1223);n({target:"Array",proto:!0},{includes:function(e){return o(this,e,arguments.length>1?arguments[1]:void 0)}}),i("includes")},6992:(e,t,r)=>{"use strict";var n=r(5656),o=r(1223),i=r(7497),a=r(9909),s=r(654),c="Array Iterator",u=a.set,l=a.getterFor(c);e.exports=s(Array,"Array",(function(e,t){u(this,{type:c,target:n(e),index:0,kind:t})}),(function(){var e=l(this),t=e.target,r=e.kind,n=e.index++;return!t||n>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==r?{value:n,done:!1}:"values"==r?{value:t[n],done:!1}:{value:[n,t[n]],done:!1}}),"values"),i.Arguments=i.Array,o("keys"),o("values"),o("entries")},9601:(e,t,r)=>{var n=r(2109),o=r(1574);n({target:"Object",stat:!0,forced:Object.assign!==o},{assign:o})},1539:(e,t,r)=>{var n=r(1694),o=r(1320),i=r(288);n||o(Object.prototype,"toString",i,{unsafe:!0})},7922:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916),i=r(9662),a=r(8523),s=r(2534),c=r(408);n({target:"Promise",stat:!0},{allSettled:function(e){var t=this,r=a.f(t),n=r.resolve,u=r.reject,l=s((function(){var r=i(t.resolve),a=[],s=0,u=1;c(e,(function(e){var i=s++,c=!1;u++,o(r,t,e).then((function(e){c||(c=!0,a[i]={status:"fulfilled",value:e},--u||n(a))}),(function(e){c||(c=!0,a[i]={status:"rejected",reason:e},--u||n(a))}))})),--u||n(a)}));return l.error&&u(l.value),r.promise}})},4668:(e,t,r)=>{"use strict";var n=r(2109),o=r(9662),i=r(5005),a=r(6916),s=r(8523),c=r(2534),u=r(408),l="No one promise resolved";n({target:"Promise",stat:!0},{any:function(e){var t=this,r=i("AggregateError"),n=s.f(t),f=n.resolve,d=n.reject,h=c((function(){var n=o(t.resolve),i=[],s=0,c=1,h=!1;u(e,(function(e){var o=s++,u=!1;c++,a(n,t,e).then((function(e){u||h||(h=!0,f(e))}),(function(e){u||h||(u=!0,i[o]=e,--c||d(new r(i,l)))}))})),--c||d(new r(i,l))}));return h.error&&d(h.value),n.promise}})},7727:(e,t,r)=>{"use strict";var n=r(2109),o=r(1913),i=r(3366),a=r(7293),s=r(5005),c=r(614),u=r(6707),l=r(9478),f=r(1320);if(n({target:"Promise",proto:!0,real:!0,forced:!!i&&a((function(){i.prototype.finally.call({then:function(){}},(function(){}))}))},{finally:function(e){var t=u(this,s("Promise")),r=c(e);return this.then(r?function(r){return l(t,e()).then((function(){return r}))}:e,r?function(r){return l(t,e()).then((function(){throw r}))}:e)}}),!o&&c(i)){var d=s("Promise").prototype.finally;i.prototype.finally!==d&&f(i.prototype,"finally",d,{unsafe:!0})}},8674:(e,t,r)=>{"use strict";var n,o,i,a,s=r(2109),c=r(1913),u=r(7854),l=r(5005),f=r(6916),d=r(3366),h=r(1320),p=r(2248),v=r(7674),m=r(8003),y=r(6340),g=r(9662),b=r(614),w=r(111),C=r(5787),S=r(2788),_=r(408),E=r(7072),O=r(6707),x=r(261).set,A=r(5948),P=r(9478),M=r(842),k=r(8523),j=r(2534),L=r(9909),T=r(4705),I=r(5112),R=r(7871),F=r(5268),D=r(7392),U=I("species"),N="Promise",B=L.get,V=L.set,G=L.getterFor(N),H=d&&d.prototype,q=d,z=H,K=u.TypeError,W=u.document,J=u.process,Q=k.f,$=Q,Y=!!(W&&W.createEvent&&u.dispatchEvent),X=b(u.PromiseRejectionEvent),Z="unhandledrejection",ee=!1,te=T(N,(function(){var e=S(q),t=e!==String(q);if(!t&&66===D)return!0;if(c&&!z.finally)return!0;if(D>=51&&/native code/.test(e))return!1;var r=new q((function(e){e(1)})),n=function(e){e((function(){}),(function(){}))};return(r.constructor={})[U]=n,!(ee=r.then((function(){}))instanceof n)||!t&&R&&!X})),re=te||!E((function(e){q.all(e).catch((function(){}))})),ne=function(e){var t;return!(!w(e)||!b(t=e.then))&&t},oe=function(e,t){if(!e.notified){e.notified=!0;var r=e.reactions;A((function(){for(var n=e.value,o=1==e.state,i=0;r.length>i;){var a,s,c,u=r[i++],l=o?u.ok:u.fail,d=u.resolve,h=u.reject,p=u.domain;try{l?(o||(2===e.rejection&&ce(e),e.rejection=1),!0===l?a=n:(p&&p.enter(),a=l(n),p&&(p.exit(),c=!0)),a===u.promise?h(K("Promise-chain cycle")):(s=ne(a))?f(s,a,d,h):d(a)):h(n)}catch(e){p&&!c&&p.exit(),h(e)}}e.reactions=[],e.notified=!1,t&&!e.rejection&&ae(e)}))}},ie=function(e,t,r){var n,o;Y?((n=W.createEvent("Event")).promise=t,n.reason=r,n.initEvent(e,!1,!0),u.dispatchEvent(n)):n={promise:t,reason:r},!X&&(o=u["on"+e])?o(n):e===Z&&M("Unhandled promise rejection",r)},ae=function(e){f(x,u,(function(){var t,r=e.facade,n=e.value;if(se(e)&&(t=j((function(){F?J.emit("unhandledRejection",n,r):ie(Z,r,n)})),e.rejection=F||se(e)?2:1,t.error))throw t.value}))},se=function(e){return 1!==e.rejection&&!e.parent},ce=function(e){f(x,u,(function(){var t=e.facade;F?J.emit("rejectionHandled",t):ie("rejectionhandled",t,e.value)}))},ue=function(e,t,r){return function(n){e(t,n,r)}},le=function(e,t,r){e.done||(e.done=!0,r&&(e=r),e.value=t,e.state=2,oe(e,!0))},fe=function(e,t,r){if(!e.done){e.done=!0,r&&(e=r);try{if(e.facade===t)throw K("Promise can't be resolved itself");var n=ne(t);n?A((function(){var r={done:!1};try{f(n,t,ue(fe,r,e),ue(le,r,e))}catch(t){le(r,t,e)}})):(e.value=t,e.state=1,oe(e,!1))}catch(t){le({done:!1},t,e)}}};if(te&&(z=(q=function(e){C(this,z),g(e),f(n,this);var t=B(this);try{e(ue(fe,t),ue(le,t))}catch(e){le(t,e)}}).prototype,(n=function(e){V(this,{type:N,done:!1,notified:!1,parent:!1,reactions:[],rejection:!1,state:0,value:void 0})}).prototype=p(z,{then:function(e,t){var r=G(this),n=r.reactions,o=Q(O(this,q));return o.ok=!b(e)||e,o.fail=b(t)&&t,o.domain=F?J.domain:void 0,r.parent=!0,n[n.length]=o,0!=r.state&&oe(r,!1),o.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new n,t=B(e);this.promise=e,this.resolve=ue(fe,t),this.reject=ue(le,t)},k.f=Q=function(e){return e===q||e===i?new o(e):$(e)},!c&&b(d)&&H!==Object.prototype)){a=H.then,ee||(h(H,"then",(function(e,t){var r=this;return new q((function(e,t){f(a,r,e,t)})).then(e,t)}),{unsafe:!0}),h(H,"catch",z.catch,{unsafe:!0}));try{delete H.constructor}catch(e){}v&&v(H,z)}s({global:!0,wrap:!0,forced:te},{Promise:q}),m(q,N,!1,!0),y(N),i=l(N),s({target:N,stat:!0,forced:te},{reject:function(e){var t=Q(this);return f(t.reject,void 0,e),t.promise}}),s({target:N,stat:!0,forced:c||te},{resolve:function(e){return P(c&&this===i?q:this,e)}}),s({target:N,stat:!0,forced:re},{all:function(e){var t=this,r=Q(t),n=r.resolve,o=r.reject,i=j((function(){var r=g(t.resolve),i=[],a=0,s=1;_(e,(function(e){var c=a++,u=!1;s++,f(r,t,e).then((function(e){u||(u=!0,i[c]=e,--s||n(i))}),o)})),--s||n(i)}));return i.error&&o(i.value),r.promise},race:function(e){var t=this,r=Q(t),n=r.reject,o=j((function(){var o=g(t.resolve);_(e,(function(e){f(o,t,e).then(r.resolve,n)}))}));return o.error&&n(o.value),r.promise}})},8783:(e,t,r)=>{"use strict";var n=r(8710).charAt,o=r(1340),i=r(9909),a=r(654),s="String Iterator",c=i.set,u=i.getterFor(s);a(String,"String",(function(e){c(this,{type:s,string:o(e),index:0})}),(function(){var e,t=u(this),r=t.string,o=t.index;return o>=r.length?{value:void 0,done:!0}:(e=n(r,o),t.index+=e.length,{value:e,done:!1})}))},8628:(e,t,r)=>{r(9170)},7314:(e,t,r)=>{r(7922)},6290:(e,t,r)=>{r(4668)},7479:(e,t,r)=>{"use strict";var n=r(2109),o=r(8523),i=r(2534);n({target:"Promise",stat:!0},{try:function(e){var t=o.f(this),r=i(e);return(r.error?t.reject:t.resolve)(r.value),t.promise}})},3948:(e,t,r)=>{var n=r(7854),o=r(8324),i=r(8509),a=r(6992),s=r(8880),c=r(5112),u=c("iterator"),l=c("toStringTag"),f=a.values,d=function(e,t){if(e){if(e[u]!==f)try{s(e,u,f)}catch(t){e[u]=f}if(e[l]||s(e,l,t),o[t])for(var r in a)if(e[r]!==a[r])try{s(e,r,a[r])}catch(t){e[r]=a[r]}}};for(var h in o)d(n[h]&&n[h].prototype,h);d(i,"DOMTokenList")},1637:(e,t,r)=>{"use strict";r(6992);var n=r(2109),o=r(7854),i=r(5005),a=r(6916),s=r(1702),c=r(590),u=r(1320),l=r(2248),f=r(8003),d=r(4994),h=r(9909),p=r(5787),v=r(614),m=r(2597),y=r(9974),g=r(648),b=r(9670),w=r(111),C=r(1340),S=r(30),_=r(9114),E=r(8554),O=r(1246),x=r(5112),A=r(4362),P=x("iterator"),M="URLSearchParams",k="URLSearchParamsIterator",j=h.set,L=h.getterFor(M),T=h.getterFor(k),I=i("fetch"),R=i("Request"),F=i("Headers"),D=R&&R.prototype,U=F&&F.prototype,N=o.RegExp,B=o.TypeError,V=o.decodeURIComponent,G=o.encodeURIComponent,H=s("".charAt),q=s([].join),z=s([].push),K=s("".replace),W=s([].shift),J=s([].splice),Q=s("".split),$=s("".slice),Y=/\+/g,X=Array(4),Z=function(e){return X[e-1]||(X[e-1]=N("((?:%[\\da-f]{2}){"+e+"})","gi"))},ee=function(e){try{return V(e)}catch(t){return e}},te=function(e){var t=K(e,Y," "),r=4;try{return V(t)}catch(e){for(;r;)t=K(t,Z(r--),ee);return t}},re=/[!'()~]|%20/g,ne={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+"},oe=function(e){return ne[e]},ie=function(e){return K(G(e),re,oe)},ae=function(e,t){if(t)for(var r,n,o=Q(t,"&"),i=0;i<o.length;)(r=o[i++]).length&&(n=Q(r,"="),z(e,{key:te(W(n)),value:te(q(n,"="))}))},se=function(e){this.entries.length=0,ae(this.entries,e)},ce=function(e,t){if(e<t)throw B("Not enough arguments")},ue=d((function(e,t){j(this,{type:k,iterator:E(L(e).entries),kind:t})}),"Iterator",(function(){var e=T(this),t=e.kind,r=e.iterator.next(),n=r.value;return r.done||(r.value="keys"===t?n.key:"values"===t?n.value:[n.key,n.value]),r})),le=function(){p(this,fe);var e,t,r,n,o,i,s,c,u,l=arguments.length>0?arguments[0]:void 0,f=this,d=[];if(j(f,{type:M,entries:d,updateURL:function(){},updateSearchParams:se}),void 0!==l)if(w(l))if(e=O(l))for(r=(t=E(l,e)).next;!(n=a(r,t)).done;){if(i=(o=E(b(n.value))).next,(s=a(i,o)).done||(c=a(i,o)).done||!a(i,o).done)throw B("Expected sequence with length 2");z(d,{key:C(s.value),value:C(c.value)})}else for(u in l)m(l,u)&&z(d,{key:u,value:C(l[u])});else ae(d,"string"==typeof l?"?"===H(l,0)?$(l,1):l:C(l))},fe=le.prototype;if(l(fe,{append:function(e,t){ce(arguments.length,2);var r=L(this);z(r.entries,{key:C(e),value:C(t)}),r.updateURL()},delete:function(e){ce(arguments.length,1);for(var t=L(this),r=t.entries,n=C(e),o=0;o<r.length;)r[o].key===n?J(r,o,1):o++;t.updateURL()},get:function(e){ce(arguments.length,1);for(var t=L(this).entries,r=C(e),n=0;n<t.length;n++)if(t[n].key===r)return t[n].value;return null},getAll:function(e){ce(arguments.length,1);for(var t=L(this).entries,r=C(e),n=[],o=0;o<t.length;o++)t[o].key===r&&z(n,t[o].value);return n},has:function(e){ce(arguments.length,1);for(var t=L(this).entries,r=C(e),n=0;n<t.length;)if(t[n++].key===r)return!0;return!1},set:function(e,t){ce(arguments.length,1);for(var r,n=L(this),o=n.entries,i=!1,a=C(e),s=C(t),c=0;c<o.length;c++)(r=o[c]).key===a&&(i?J(o,c--,1):(i=!0,r.value=s));i||z(o,{key:a,value:s}),n.updateURL()},sort:function(){var e=L(this);A(e.entries,(function(e,t){return e.key>t.key?1:-1})),e.updateURL()},forEach:function(e){for(var t,r=L(this).entries,n=y(e,arguments.length>1?arguments[1]:void 0),o=0;o<r.length;)n((t=r[o++]).value,t.key,this)},keys:function(){return new ue(this,"keys")},values:function(){return new ue(this,"values")},entries:function(){return new ue(this,"entries")}},{enumerable:!0}),u(fe,P,fe.entries,{name:"entries"}),u(fe,"toString",(function(){for(var e,t=L(this).entries,r=[],n=0;n<t.length;)e=t[n++],z(r,ie(e.key)+"="+ie(e.value));return q(r,"&")}),{enumerable:!0}),f(le,M),n({global:!0,forced:!c},{URLSearchParams:le}),!c&&v(F)){var de=s(U.has),he=s(U.set),pe=function(e){if(w(e)){var t,r=e.body;if(g(r)===M)return t=e.headers?new F(e.headers):new F,de(t,"content-type")||he(t,"content-type","application/x-www-form-urlencoded;charset=UTF-8"),S(e,{body:_(0,C(r)),headers:_(0,t)})}return e};if(v(I)&&n({global:!0,enumerable:!0,forced:!0},{fetch:function(e){return I(e,arguments.length>1?pe(arguments[1]):{})}}),v(R)){var ve=function(e){return p(this,D),new R(e,arguments.length>1?pe(arguments[1]):{})};D.constructor=ve,ve.prototype=D,n({global:!0,forced:!0},{Request:ve})}}e.exports={URLSearchParams:le,getState:L}},285:(e,t,r)=>{"use strict";r(8783);var n,o=r(2109),i=r(9781),a=r(590),s=r(7854),c=r(9974),u=r(6916),l=r(1702),f=r(6048),d=r(1320),h=r(5787),p=r(2597),v=r(1574),m=r(8457),y=r(206),g=r(8710).codeAt,b=r(3197),w=r(1340),C=r(8003),S=r(1637),_=r(9909),E=_.set,O=_.getterFor("URL"),x=S.URLSearchParams,A=S.getState,P=s.URL,M=s.TypeError,k=s.parseInt,j=Math.floor,L=Math.pow,T=l("".charAt),I=l(/./.exec),R=l([].join),F=l(1..toString),D=l([].pop),U=l([].push),N=l("".replace),B=l([].shift),V=l("".split),G=l("".slice),H=l("".toLowerCase),q=l([].unshift),z="Invalid scheme",K="Invalid host",W="Invalid port",J=/[a-z]/i,Q=/[\d+-.a-z]/i,$=/\d/,Y=/^0x/i,X=/^[0-7]+$/,Z=/^\d+$/,ee=/^[\da-f]+$/i,te=/[\0\t\n\r #%/:<>?@[\\\]^|]/,re=/[\0\t\n\r #/:<>?@[\\\]^|]/,ne=/^[\u0000-\u0020]+|[\u0000-\u0020]+$/g,oe=/[\t\n\r]/g,ie=function(e,t){var r,n,o;if("["==T(t,0)){if("]"!=T(t,t.length-1))return K;if(!(r=se(G(t,1,-1))))return K;e.host=r}else if(ve(e)){if(t=b(t),I(te,t))return K;if(null===(r=ae(t)))return K;e.host=r}else{if(I(re,t))return K;for(r="",n=m(t),o=0;o<n.length;o++)r+=he(n[o],ue);e.host=r}},ae=function(e){var t,r,n,o,i,a,s,c=V(e,".");if(c.length&&""==c[c.length-1]&&c.length--,(t=c.length)>4)return e;for(r=[],n=0;n<t;n++){if(""==(o=c[n]))return e;if(i=10,o.length>1&&"0"==T(o,0)&&(i=I(Y,o)?16:8,o=G(o,8==i?1:2)),""===o)a=0;else{if(!I(10==i?Z:8==i?X:ee,o))return e;a=k(o,i)}U(r,a)}for(n=0;n<t;n++)if(a=r[n],n==t-1){if(a>=L(256,5-t))return null}else if(a>255)return null;for(s=D(r),n=0;n<r.length;n++)s+=r[n]*L(256,3-n);return s},se=function(e){var t,r,n,o,i,a,s,c=[0,0,0,0,0,0,0,0],u=0,l=null,f=0,d=function(){return T(e,f)};if(":"==d()){if(":"!=T(e,1))return;f+=2,l=++u}for(;d();){if(8==u)return;if(":"!=d()){for(t=r=0;r<4&&I(ee,d());)t=16*t+k(d(),16),f++,r++;if("."==d()){if(0==r)return;if(f-=r,u>6)return;for(n=0;d();){if(o=null,n>0){if(!("."==d()&&n<4))return;f++}if(!I($,d()))return;for(;I($,d());){if(i=k(d(),10),null===o)o=i;else{if(0==o)return;o=10*o+i}if(o>255)return;f++}c[u]=256*c[u]+o,2!=++n&&4!=n||u++}if(4!=n)return;break}if(":"==d()){if(f++,!d())return}else if(d())return;c[u++]=t}else{if(null!==l)return;f++,l=++u}}if(null!==l)for(a=u-l,u=7;0!=u&&a>0;)s=c[u],c[u--]=c[l+a-1],c[l+--a]=s;else if(8!=u)return;return c},ce=function(e){var t,r,n,o;if("number"==typeof e){for(t=[],r=0;r<4;r++)q(t,e%256),e=j(e/256);return R(t,".")}if("object"==typeof e){for(t="",n=function(e){for(var t=null,r=1,n=null,o=0,i=0;i<8;i++)0!==e[i]?(o>r&&(t=n,r=o),n=null,o=0):(null===n&&(n=i),++o);return o>r&&(t=n,r=o),t}(e),r=0;r<8;r++)o&&0===e[r]||(o&&(o=!1),n===r?(t+=r?":":"::",o=!0):(t+=F(e[r],16),r<7&&(t+=":")));return"["+t+"]"}return e},ue={},le=v({},ue,{" ":1,'"':1,"<":1,">":1,"`":1}),fe=v({},le,{"#":1,"?":1,"{":1,"}":1}),de=v({},fe,{"/":1,":":1,";":1,"=":1,"@":1,"[":1,"\\":1,"]":1,"^":1,"|":1}),he=function(e,t){var r=g(e,0);return r>32&&r<127&&!p(t,e)?e:encodeURIComponent(e)},pe={ftp:21,file:null,http:80,https:443,ws:80,wss:443},ve=function(e){return p(pe,e.scheme)},me=function(e){return""!=e.username||""!=e.password},ye=function(e){return!e.host||e.cannotBeABaseURL||"file"==e.scheme},ge=function(e,t){var r;return 2==e.length&&I(J,T(e,0))&&(":"==(r=T(e,1))||!t&&"|"==r)},be=function(e){var t;return e.length>1&&ge(G(e,0,2))&&(2==e.length||"/"===(t=T(e,2))||"\\"===t||"?"===t||"#"===t)},we=function(e){var t=e.path,r=t.length;!r||"file"==e.scheme&&1==r&&ge(t[0],!0)||t.length--},Ce=function(e){return"."===e||"%2e"===H(e)},Se={},_e={},Ee={},Oe={},xe={},Ae={},Pe={},Me={},ke={},je={},Le={},Te={},Ie={},Re={},Fe={},De={},Ue={},Ne={},Be={},Ve={},Ge={},He=function(e,t,r,o){var i,a,s,c,u,l=r||Se,f=0,d="",h=!1,v=!1,g=!1;for(r||(e.scheme="",e.username="",e.password="",e.host=null,e.port=null,e.path=[],e.query=null,e.fragment=null,e.cannotBeABaseURL=!1,t=N(t,ne,"")),t=N(t,oe,""),i=m(t);f<=i.length;){switch(a=i[f],l){case Se:if(!a||!I(J,a)){if(r)return z;l=Ee;continue}d+=H(a),l=_e;break;case _e:if(a&&(I(Q,a)||"+"==a||"-"==a||"."==a))d+=H(a);else{if(":"!=a){if(r)return z;d="",l=Ee,f=0;continue}if(r&&(ve(e)!=p(pe,d)||"file"==d&&(me(e)||null!==e.port)||"file"==e.scheme&&!e.host))return;if(e.scheme=d,r)return void(ve(e)&&pe[e.scheme]==e.port&&(e.port=null));d="","file"==e.scheme?l=Re:ve(e)&&o&&o.scheme==e.scheme?l=Oe:ve(e)?l=Me:"/"==i[f+1]?(l=xe,f++):(e.cannotBeABaseURL=!0,U(e.path,""),l=Be)}break;case Ee:if(!o||o.cannotBeABaseURL&&"#"!=a)return z;if(o.cannotBeABaseURL&&"#"==a){e.scheme=o.scheme,e.path=y(o.path),e.query=o.query,e.fragment="",e.cannotBeABaseURL=!0,l=Ge;break}l="file"==o.scheme?Re:Ae;continue;case Oe:if("/"!=a||"/"!=i[f+1]){l=Ae;continue}l=ke,f++;break;case xe:if("/"==a){l=je;break}l=Ne;continue;case Ae:if(e.scheme=o.scheme,a==n)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=y(o.path),e.query=o.query;else if("/"==a||"\\"==a&&ve(e))l=Pe;else if("?"==a)e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=y(o.path),e.query="",l=Ve;else{if("#"!=a){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=y(o.path),e.path.length--,l=Ne;continue}e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,e.path=y(o.path),e.query=o.query,e.fragment="",l=Ge}break;case Pe:if(!ve(e)||"/"!=a&&"\\"!=a){if("/"!=a){e.username=o.username,e.password=o.password,e.host=o.host,e.port=o.port,l=Ne;continue}l=je}else l=ke;break;case Me:if(l=ke,"/"!=a||"/"!=T(d,f+1))continue;f++;break;case ke:if("/"!=a&&"\\"!=a){l=je;continue}break;case je:if("@"==a){h&&(d="%40"+d),h=!0,s=m(d);for(var b=0;b<s.length;b++){var w=s[b];if(":"!=w||g){var C=he(w,de);g?e.password+=C:e.username+=C}else g=!0}d=""}else if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&ve(e)){if(h&&""==d)return"Invalid authority";f-=m(d).length+1,d="",l=Le}else d+=a;break;case Le:case Te:if(r&&"file"==e.scheme){l=De;continue}if(":"!=a||v){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&ve(e)){if(ve(e)&&""==d)return K;if(r&&""==d&&(me(e)||null!==e.port))return;if(c=ie(e,d))return c;if(d="",l=Ue,r)return;continue}"["==a?v=!0:"]"==a&&(v=!1),d+=a}else{if(""==d)return K;if(c=ie(e,d))return c;if(d="",l=Ie,r==Te)return}break;case Ie:if(!I($,a)){if(a==n||"/"==a||"?"==a||"#"==a||"\\"==a&&ve(e)||r){if(""!=d){var S=k(d,10);if(S>65535)return W;e.port=ve(e)&&S===pe[e.scheme]?null:S,d=""}if(r)return;l=Ue;continue}return W}d+=a;break;case Re:if(e.scheme="file","/"==a||"\\"==a)l=Fe;else{if(!o||"file"!=o.scheme){l=Ne;continue}if(a==n)e.host=o.host,e.path=y(o.path),e.query=o.query;else if("?"==a)e.host=o.host,e.path=y(o.path),e.query="",l=Ve;else{if("#"!=a){be(R(y(i,f),""))||(e.host=o.host,e.path=y(o.path),we(e)),l=Ne;continue}e.host=o.host,e.path=y(o.path),e.query=o.query,e.fragment="",l=Ge}}break;case Fe:if("/"==a||"\\"==a){l=De;break}o&&"file"==o.scheme&&!be(R(y(i,f),""))&&(ge(o.path[0],!0)?U(e.path,o.path[0]):e.host=o.host),l=Ne;continue;case De:if(a==n||"/"==a||"\\"==a||"?"==a||"#"==a){if(!r&&ge(d))l=Ne;else if(""==d){if(e.host="",r)return;l=Ue}else{if(c=ie(e,d))return c;if("localhost"==e.host&&(e.host=""),r)return;d="",l=Ue}continue}d+=a;break;case Ue:if(ve(e)){if(l=Ne,"/"!=a&&"\\"!=a)continue}else if(r||"?"!=a)if(r||"#"!=a){if(a!=n&&(l=Ne,"/"!=a))continue}else e.fragment="",l=Ge;else e.query="",l=Ve;break;case Ne:if(a==n||"/"==a||"\\"==a&&ve(e)||!r&&("?"==a||"#"==a)){if(".."===(u=H(u=d))||"%2e."===u||".%2e"===u||"%2e%2e"===u?(we(e),"/"==a||"\\"==a&&ve(e)||U(e.path,"")):Ce(d)?"/"==a||"\\"==a&&ve(e)||U(e.path,""):("file"==e.scheme&&!e.path.length&&ge(d)&&(e.host&&(e.host=""),d=T(d,0)+":"),U(e.path,d)),d="","file"==e.scheme&&(a==n||"?"==a||"#"==a))for(;e.path.length>1&&""===e.path[0];)B(e.path);"?"==a?(e.query="",l=Ve):"#"==a&&(e.fragment="",l=Ge)}else d+=he(a,fe);break;case Be:"?"==a?(e.query="",l=Ve):"#"==a?(e.fragment="",l=Ge):a!=n&&(e.path[0]+=he(a,ue));break;case Ve:r||"#"!=a?a!=n&&("'"==a&&ve(e)?e.query+="%27":e.query+="#"==a?"%23":he(a,ue)):(e.fragment="",l=Ge);break;case Ge:a!=n&&(e.fragment+=he(a,le))}f++}},qe=function(e){var t,r,n=h(this,ze),o=arguments.length>1?arguments[1]:void 0,a=w(e),s=E(n,{type:"URL"});if(void 0!==o)try{t=O(o)}catch(e){if(r=He(t={},w(o)))throw M(r)}if(r=He(s,a,null,t))throw M(r);var c=s.searchParams=new x,l=A(c);l.updateSearchParams(s.query),l.updateURL=function(){s.query=w(c)||null},i||(n.href=u(Ke,n),n.origin=u(We,n),n.protocol=u(Je,n),n.username=u(Qe,n),n.password=u($e,n),n.host=u(Ye,n),n.hostname=u(Xe,n),n.port=u(Ze,n),n.pathname=u(et,n),n.search=u(tt,n),n.searchParams=u(rt,n),n.hash=u(nt,n))},ze=qe.prototype,Ke=function(){var e=O(this),t=e.scheme,r=e.username,n=e.password,o=e.host,i=e.port,a=e.path,s=e.query,c=e.fragment,u=t+":";return null!==o?(u+="//",me(e)&&(u+=r+(n?":"+n:"")+"@"),u+=ce(o),null!==i&&(u+=":"+i)):"file"==t&&(u+="//"),u+=e.cannotBeABaseURL?a[0]:a.length?"/"+R(a,"/"):"",null!==s&&(u+="?"+s),null!==c&&(u+="#"+c),u},We=function(){var e=O(this),t=e.scheme,r=e.port;if("blob"==t)try{return new qe(t.path[0]).origin}catch(e){return"null"}return"file"!=t&&ve(e)?t+"://"+ce(e.host)+(null!==r?":"+r:""):"null"},Je=function(){return O(this).scheme+":"},Qe=function(){return O(this).username},$e=function(){return O(this).password},Ye=function(){var e=O(this),t=e.host,r=e.port;return null===t?"":null===r?ce(t):ce(t)+":"+r},Xe=function(){var e=O(this).host;return null===e?"":ce(e)},Ze=function(){var e=O(this).port;return null===e?"":w(e)},et=function(){var e=O(this),t=e.path;return e.cannotBeABaseURL?t[0]:t.length?"/"+R(t,"/"):""},tt=function(){var e=O(this).query;return e?"?"+e:""},rt=function(){return O(this).searchParams},nt=function(){var e=O(this).fragment;return e?"#"+e:""},ot=function(e,t){return{get:e,set:t,configurable:!0,enumerable:!0}};if(i&&f(ze,{href:ot(Ke,(function(e){var t=O(this),r=w(e),n=He(t,r);if(n)throw M(n);A(t.searchParams).updateSearchParams(t.query)})),origin:ot(We),protocol:ot(Je,(function(e){var t=O(this);He(t,w(e)+":",Se)})),username:ot(Qe,(function(e){var t=O(this),r=m(w(e));if(!ye(t)){t.username="";for(var n=0;n<r.length;n++)t.username+=he(r[n],de)}})),password:ot($e,(function(e){var t=O(this),r=m(w(e));if(!ye(t)){t.password="";for(var n=0;n<r.length;n++)t.password+=he(r[n],de)}})),host:ot(Ye,(function(e){var t=O(this);t.cannotBeABaseURL||He(t,w(e),Le)})),hostname:ot(Xe,(function(e){var t=O(this);t.cannotBeABaseURL||He(t,w(e),Te)})),port:ot(Ze,(function(e){var t=O(this);ye(t)||(""==(e=w(e))?t.port=null:He(t,e,Ie))})),pathname:ot(et,(function(e){var t=O(this);t.cannotBeABaseURL||(t.path=[],He(t,w(e),Ue))})),search:ot(tt,(function(e){var t=O(this);""==(e=w(e))?t.query=null:("?"==T(e,0)&&(e=G(e,1)),t.query="",He(t,e,Ve)),A(t.searchParams).updateSearchParams(t.query)})),searchParams:ot(rt),hash:ot(nt,(function(e){var t=O(this);""!=(e=w(e))?("#"==T(e,0)&&(e=G(e,1)),t.fragment="",He(t,e,Ge)):t.fragment=null}))}),d(ze,"toJSON",(function(){return u(Ke,this)}),{enumerable:!0}),d(ze,"toString",(function(){return u(Ke,this)}),{enumerable:!0}),P){var it=P.createObjectURL,at=P.revokeObjectURL;it&&d(qe,"createObjectURL",c(it,P)),at&&d(qe,"revokeObjectURL",c(at,P))}C(qe,"URL"),o({global:!0,forced:!a,sham:!i},{URL:qe})},3753:(e,t,r)=>{"use strict";var n=r(2109),o=r(6916);n({target:"URL",proto:!0,enumerable:!0},{toJSON:function(){return o(URL.prototype.toString,this)}})},6575:(e,t,r)=>{var n=r(3462);e.exports=n},4977:(e,t,r)=>{var n=r(9116);e.exports=n},1150:(e,t,r)=>{var n=r(7633);r(3948),e.exports=n},8149:(e,t,r)=>{var n=r(1439);e.exports=n},1439:(e,t,r)=>{r(285),r(3753),r(1637);var n=r(857);e.exports=n.URL},6058:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r{constructor(e,t){this.timeout=e,this.db=new Map,this.nextGc=null,this.gcDelay=t||5}get size(){return this.db.size}get all(){const e=new Set;return this.db.forEach(((t,r)=>{e.add(r)})),e}add(e){return this.db.set(e,Date.now()+this.timeout),this.scheduleGc(),this}has(e){return this.db.has(e)}delete(e){return this.db.has(e)&&(this.db.delete(e),this.scheduleGc(!0)),this}gc(){const e=Date.now();this.db.forEach(((t,r)=>{t<e&&this.db.delete(r)})),this.nextGc=null,this.scheduleGc()}scheduleGc(e=!1){if(e&&this.nextGc&&(clearTimeout(this.nextGc),this.nextGc=null),null!==this.nextGc||0===this.db.size)return;let t=-1;this.db.forEach((e=>{(-1===t||e<t)&&(t=e)})),-1===t&&(t=Date.now());const r=t-Date.now()+this.gcDelay;this.nextGc=setTimeout(this.gc.bind(this),r)}}t.default=r,e.exports=r,e.exports.default=r},1221:e=>{"use strict";"undefined"!=typeof self?e.exports=self:"undefined"!=typeof window?e.exports=window:e.exports=Function("return this")()},2168:(e,t,r)=>{"use strict";var n=r(1221);e.exports=function(){return"object"==typeof r.g&&r.g&&r.g.Math===Math&&r.g.Array===Array?r.g:n}},4155:e=>{var t,r,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],u=!1,l=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):l=-1,c.length&&d())}function d(){if(!u){var e=a(f);u=!0;for(var t=c.length;t;){for(s=c,c=[];++l<t;)s&&s[l].run();l=-1,t=c.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||u||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},6522:(e,t,r)=>{"use strict";var n,o=r(4155);(n=void 0!==o&&"[object process]"==={}.toString.call(o)||"undefined"!=typeof navigator&&"ReactNative"===navigator.product?r.g:self).Proxy||(n.Proxy=r(5607)(),n.Proxy.revocable=n.Proxy.revocable)},5607:e=>{e.exports=function(){let e,t=null;function r(e){return!!e&&("object"==typeof e||"function"==typeof e)}function n(e){if(null!==e&&!r(e))throw new TypeError("Object prototype may only be an Object or null: "+e)}const o=Object,i=Boolean(o.create)||!({__proto__:null}instanceof o),a=o.create||(i?function(e){return n(e),{__proto__:e}}:function(e){if(n(e),null===e)throw new SyntaxError("Native Object.create is required to create objects with null prototype");var t=function(){};return t.prototype=e,new t}),s=function(){return null},c=o.getPrototypeOf||([].__proto__===Array.prototype?function(e){const t=e.__proto__;return r(t)?t:null}:s);return e=function(u,l){if(void 0===(this&&this instanceof e?this.constructor:void 0))throw new TypeError("Constructor Proxy requires 'new'");if(!r(u)||!r(l))throw new TypeError("Cannot create proxy with a non-object as target or handler");let f=function(){};t=function(){u=null,f=function(e){throw new TypeError(`Cannot perform '${e}' on a proxy that has been revoked`)}},setTimeout((function(){t=null}),0);const d=l;l={get:null,set:null,apply:null,construct:null};for(let e in d){if(!(e in l))throw new TypeError(`Proxy polyfill does not support trap '${e}'`);l[e]=d[e]}"function"==typeof d&&(l.apply=d.apply.bind(d));const h=c(u);let p,v=!1,m=!1;"function"==typeof u?(p=function(){const e=this&&this.constructor===p,t=Array.prototype.slice.call(arguments);return f(e?"construct":"apply"),e&&l.construct?l.construct.call(this,u,t):!e&&l.apply?l.apply(u,this,t):e?(t.unshift(u),new(u.bind.apply(u,t))):u.apply(this,t)},v=!0):u instanceof Array?(p=[],m=!0):p=i||null!==h?a(h):{};const y=l.get?function(e){return f("get"),l.get(this,e,p)}:function(e){return f("get"),this[e]},g=l.set?function(e,t){f("set"),l.set(this,e,t,p)}:function(e,t){f("set"),this[e]=t},b=o.getOwnPropertyNames(u),w={};b.forEach((function(e){if((v||m)&&e in p)return;const t=o.getOwnPropertyDescriptor(u,e),r={enumerable:Boolean(t.enumerable),get:y.bind(u,e),set:g.bind(u,e)};o.defineProperty(p,e,r),w[e]=!0}));let C=!0;if(v||m){const e=o.setPrototypeOf||([].__proto__===Array.prototype?function(e,t){return n(t),e.__proto__=t,e}:s);h&&e(p,h)||(C=!1)}if(l.get||!C)for(let e in u)w[e]||o.defineProperty(p,e,{get:y.bind(u,e)});return o.seal(u),o.seal(p),p},e.revocable=function(r,n){return{proxy:new e(r,n),revoke:t}},e}},8390:e=>{var t;self,t=()=>(()=>{var e={318:e=>{e.exports=function(e){return e&&e.__esModule?e:{default:e}},e.exports.__esModule=!0,e.exports.default=e.exports},8:e=>{function t(r){return e.exports=t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e.exports.__esModule=!0,e.exports.default=e.exports,t(r)}e.exports=t,e.exports.__esModule=!0,e.exports.default=e.exports},991:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.OPEN_BROADCAST_CHANNELS=t.BroadcastChannel=void 0,t.clearNodeFolder=function(e){e=(0,i.fillOptionsWithDefaults)(e);var t=(0,o.chooseMethod)(e);return"node"===t.type?t.clearNodeFolder().then((function(){return!0})):n.PROMISE_RESOLVED_FALSE},t.enforceOptions=function(e){s=e};var n=r(202),o=r(632),i=r(423),a=new Set;t.OPEN_BROADCAST_CHANNELS=a;var s,c=0,u=function(e,t){var r,u;this.id=c++,a.add(this),this.name=e,s&&(t=s),this.options=(0,i.fillOptionsWithDefaults)(t),this.method=(0,o.chooseMethod)(this.options),this._iL=!1,this._onML=null,this._addEL={message:[],internal:[]},this._uMP=new Set,this._befC=[],this._prepP=null,u=(r=this).method.create(r.name,r.options),(0,n.isPromise)(u)?(r._prepP=u,u.then((function(e){r._state=e}))):r._state=u};function l(e,t,r){var o={time:e.method.microSeconds(),type:t,data:r};return(e._prepP?e._prepP:n.PROMISE_RESOLVED_VOID).then((function(){var t=e.method.postMessage(e._state,o);return e._uMP.add(t),t.catch().then((function(){return e._uMP.delete(t)})),t}))}function f(e){return e._addEL.message.length>0||e._addEL.internal.length>0}function d(e,t,r){e._addEL[t].push(r),function(e){if(!e._iL&&f(e)){var t=function(t){e._addEL[t.type].forEach((function(e){var r=e.time-1e5;t.time>=r&&e.fn(t.data)}))},r=e.method.microSeconds();e._prepP?e._prepP.then((function(){e._iL=!0,e.method.onMessage(e._state,t,r)})):(e._iL=!0,e.method.onMessage(e._state,t,r))}}(e)}function h(e,t,r){e._addEL[t]=e._addEL[t].filter((function(e){return e!==r})),function(e){if(e._iL&&!f(e)){e._iL=!1;var t=e.method.microSeconds();e.method.onMessage(e._state,null,t)}}(e)}t.BroadcastChannel=u,u._pubkey=!0,u.prototype={postMessage:function(e){if(this.closed)throw new Error("BroadcastChannel.postMessage(): Cannot post message after channel has closed "+JSON.stringify(e));return l(this,"message",e)},postInternal:function(e){return l(this,"internal",e)},set onmessage(e){var t={time:this.method.microSeconds(),fn:e};h(this,"message",this._onML),e&&"function"==typeof e?(this._onML=t,d(this,"message",t)):this._onML=null},addEventListener:function(e,t){d(this,e,{time:this.method.microSeconds(),fn:t})},removeEventListener:function(e,t){h(this,e,this._addEL[e].find((function(e){return e.fn===t})))},close:function(){var e=this;if(!this.closed){a.delete(this),this.closed=!0;var t=this._prepP?this._prepP:n.PROMISE_RESOLVED_VOID;return this._onML=null,this._addEL.message=[],t.then((function(){return Promise.all(Array.from(e._uMP))})).then((function(){return Promise.all(e._befC.map((function(e){return e()})))})).then((function(){return e.method.close(e._state)}))}},get type(){return this.method.type},get isClosed(){return this.closed}}},437:(e,t,r)=>{"use strict";var n=r(585);e.exports={BroadcastChannel:n.BroadcastChannel,createLeaderElection:n.createLeaderElection,clearNodeFolder:n.clearNodeFolder,enforceOptions:n.enforceOptions,beLeader:n.beLeader}},585:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),Object.defineProperty(t,"BroadcastChannel",{enumerable:!0,get:function(){return n.BroadcastChannel}}),Object.defineProperty(t,"OPEN_BROADCAST_CHANNELS",{enumerable:!0,get:function(){return n.OPEN_BROADCAST_CHANNELS}}),Object.defineProperty(t,"beLeader",{enumerable:!0,get:function(){return o.beLeader}}),Object.defineProperty(t,"clearNodeFolder",{enumerable:!0,get:function(){return n.clearNodeFolder}}),Object.defineProperty(t,"createLeaderElection",{enumerable:!0,get:function(){return o.createLeaderElection}}),Object.defineProperty(t,"enforceOptions",{enumerable:!0,get:function(){return n.enforceOptions}});var n=r(991),o=r(550)},550:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.beLeader=s,t.createLeaderElection=function(e,t){if(e._leaderElector)throw new Error("BroadcastChannel already has a leader-elector");t=function(e,t){return e||(e={}),(e=JSON.parse(JSON.stringify(e))).fallbackInterval||(e.fallbackInterval=3e3),e.responseTime||(e.responseTime=t.method.averageResponseTime(t.options)),e}(t,e);var r=new i(e,t);return e._befC.push((function(){return r.die()})),e._leaderElector=r,r};var n=r(202),o=r(499),i=function(e,t){var r=this;this.broadcastChannel=e,this._options=t,this.isLeader=!1,this.hasLeader=!1,this.isDead=!1,this.token=(0,n.randomToken)(),this._aplQ=n.PROMISE_RESOLVED_VOID,this._aplQC=0,this._unl=[],this._lstns=[],this._dpL=function(){},this._dpLC=!1;var o=function(e){"leader"===e.context&&("death"===e.action&&(r.hasLeader=!1),"tell"===e.action&&(r.hasLeader=!0))};this.broadcastChannel.addEventListener("internal",o),this._lstns.push(o)};function a(e,t){var r={context:"leader",action:t,token:e.token};return e.broadcastChannel.postInternal(r)}function s(e){e.isLeader=!0,e.hasLeader=!0;var t=(0,o.add)((function(){return e.die()}));e._unl.push(t);var r=function(t){"leader"===t.context&&"apply"===t.action&&a(e,"tell"),"leader"!==t.context||"tell"!==t.action||e._dpLC||(e._dpLC=!0,e._dpL(),a(e,"tell"))};return e.broadcastChannel.addEventListener("internal",r),e._lstns.push(r),a(e,"tell")}i.prototype={applyOnce:function(e){var t=this;return this.isLeader?(0,n.sleep)(0,!0):this.isDead?(0,n.sleep)(0,!1):this._aplQC>1?this._aplQ:(this._aplQC=this._aplQC+1,this._aplQ=this._aplQ.then((function(){return function(){if(t.isLeader)return n.PROMISE_RESOLVED_TRUE;var r,o=!1,i=new Promise((function(e){r=function(){o=!0,e()}})),c=[],u=function(e){"leader"===e.context&&e.token!=t.token&&(c.push(e),"apply"===e.action&&e.token>t.token&&r(),"tell"===e.action&&(r(),t.hasLeader=!0))};t.broadcastChannel.addEventListener("internal",u);var l=e?4*t._options.responseTime:t._options.responseTime;return a(t,"apply").then((function(){return Promise.race([(0,n.sleep)(l),i.then((function(){return Promise.reject(new Error)}))])})).then((function(){return a(t,"apply")})).then((function(){return Promise.race([(0,n.sleep)(l),i.then((function(){return Promise.reject(new Error)}))])})).catch((function(){})).then((function(){return t.broadcastChannel.removeEventListener("internal",u),!o&&s(t).then((function(){return!0}))}))}()})).then((function(){t._aplQC=t._aplQC-1})),this._aplQ.then((function(){return t.isLeader})))},awaitLeadership:function(){return this._aLP||(this._aLP=(e=this).isLeader?n.PROMISE_RESOLVED_VOID:new Promise((function(t){var r=!1;function o(){r||(r=!0,e.broadcastChannel.removeEventListener("internal",i),t(!0))}e.applyOnce().then((function(){e.isLeader&&o()})),function t(){return(0,n.sleep)(e._options.fallbackInterval).then((function(){if(!e.isDead&&!r)return e.isLeader?void o():e.applyOnce(!0).then((function(){e.isLeader?o():t()}))}))}();var i=function(t){"leader"===t.context&&"death"===t.action&&(e.hasLeader=!1,e.applyOnce().then((function(){e.isLeader&&o()})))};e.broadcastChannel.addEventListener("internal",i),e._lstns.push(i)}))),this._aLP;var e},set onduplicate(e){this._dpL=e},die:function(){var e=this;return this._lstns.forEach((function(t){return e.broadcastChannel.removeEventListener("internal",t)})),this._lstns=[],this._unl.forEach((function(e){return e.remove()})),this._unl=[],this.isLeader&&(this.hasLeader=!1,this.isLeader=!1),this.isDead=!0,a(this,"death")}}},632:(e,t,r)=>{"use strict";var n=r(318);r(8),Object.defineProperty(t,"__esModule",{value:!0}),t.chooseMethod=function(e){var t=[].concat(e.methods,u).filter(Boolean);if(e.type){if("simulate"===e.type)return s.default;var r=t.find((function(t){return t.type===e.type}));if(r)return r;throw new Error("method-type "+e.type+" not found")}e.webWorkerSupport||c.isNode||(t=t.filter((function(e){return"idb"!==e.type})));var n=t.find((function(e){return e.canBeUsed()}));if(n)return n;throw new Error("No useable method found in "+JSON.stringify(u.map((function(e){return e.type}))))};var o=n(r(115)),i=n(r(122)),a=n(r(924)),s=n(r(574)),c=r(202),u=[o.default,i.default,a.default]},122:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.averageResponseTime=S,t.canBeUsed=C,t.cleanOldMessages=p,t.close=g,t.create=v,t.createDatabase=u,t.default=void 0,t.getAllMessages=function(e){var t=e.transaction(s).objectStore(s),r=[];return new Promise((function(e){t.openCursor().onsuccess=function(t){var n=t.target.result;n?(r.push(n.value),n.continue()):e(r)}}))},t.getIdb=c,t.getMessagesHigherThan=f,t.getOldMessages=h,t.microSeconds=void 0,t.onMessage=w,t.postMessage=b,t.removeMessageById=d,t.type=void 0,t.writeMessage=l;var n=r(202),o=r(151),i=r(423),a=n.microSeconds;t.microSeconds=a;var s="messages";function c(){if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof window){if(void 0!==window.mozIndexedDB)return window.mozIndexedDB;if(void 0!==window.webkitIndexedDB)return window.webkitIndexedDB;if(void 0!==window.msIndexedDB)return window.msIndexedDB}return!1}function u(e){var t="pubkey.broadcast-channel-0-"+e,r=c().open(t,1);return r.onupgradeneeded=function(e){e.target.result.createObjectStore(s,{keyPath:"id",autoIncrement:!0})},new Promise((function(e,t){r.onerror=function(e){return t(e)},r.onsuccess=function(){e(r.result)}}))}function l(e,t,r){var n={uuid:t,time:(new Date).getTime(),data:r},o=e.transaction([s],"readwrite");return new Promise((function(e,t){o.oncomplete=function(){return e()},o.onerror=function(e){return t(e)},o.objectStore(s).add(n)}))}function f(e,t){var r=e.transaction(s).objectStore(s),n=[];return new Promise((function(e){(function(){try{var e=IDBKeyRange.bound(t+1,1/0);return r.openCursor(e)}catch(e){return r.openCursor()}}()).onsuccess=function(r){var o=r.target.result;o?o.value.id<t+1?o.continue(t+1):(n.push(o.value),o.continue()):e(n)}}))}function d(e,t){var r=e.transaction([s],"readwrite").objectStore(s).delete(t);return new Promise((function(e){r.onsuccess=function(){return e()}}))}function h(e,t){var r=(new Date).getTime()-t,n=e.transaction(s).objectStore(s),o=[];return new Promise((function(e){n.openCursor().onsuccess=function(t){var n=t.target.result;if(n){var i=n.value;if(!(i.time<r))return void e(o);o.push(i),n.continue()}else e(o)}}))}function p(e,t){return h(e,t).then((function(t){return Promise.all(t.map((function(t){return d(e,t.id)})))}))}function v(e,t){return t=(0,i.fillOptionsWithDefaults)(t),u(e).then((function(r){var i={closed:!1,lastCursorId:0,channelName:e,options:t,uuid:(0,n.randomToken)(),eMIs:new o.ObliviousSet(2*t.idb.ttl),writeBlockPromise:n.PROMISE_RESOLVED_VOID,messagesCallback:null,readQueuePromises:[],db:r};return r.onclose=function(){i.closed=!0,t.idb.onclose&&t.idb.onclose()},m(i),i}))}function m(e){e.closed||y(e).then((function(){return(0,n.sleep)(e.options.idb.fallbackInterval)})).then((function(){return m(e)}))}function y(e){return e.closed?n.PROMISE_RESOLVED_VOID:e.messagesCallback?f(e.db,e.lastCursorId).then((function(t){return t.filter((function(e){return!!e})).map((function(t){return t.id>e.lastCursorId&&(e.lastCursorId=t.id),t})).filter((function(t){return function(e,t){return!(e.uuid===t.uuid||t.eMIs.has(e.id)||e.data.time<t.messagesCallbackTime)}(t,e)})).sort((function(e,t){return e.time-t.time})).forEach((function(t){e.messagesCallback&&(e.eMIs.add(t.id),e.messagesCallback(t.data))})),n.PROMISE_RESOLVED_VOID})):n.PROMISE_RESOLVED_VOID}function g(e){e.closed=!0,e.db.close()}function b(e,t){return e.writeBlockPromise=e.writeBlockPromise.then((function(){return l(e.db,e.uuid,t)})).then((function(){0===(0,n.randomInt)(0,10)&&p(e.db,e.options.idb.ttl)})),e.writeBlockPromise}function w(e,t,r){e.messagesCallbackTime=r,e.messagesCallback=t,y(e)}function C(){return!n.isNode&&!!c()}function S(e){return 2*e.idb.fallbackInterval}t.type="idb";var _={create:v,close:g,onMessage:w,postMessage:b,canBeUsed:C,type:"idb",averageResponseTime:S,microSeconds:a};t.default=_},924:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addStorageEventListener=f,t.averageResponseTime=y,t.canBeUsed=m,t.close=p,t.create=h,t.default=void 0,t.getLocalStorage=c,t.microSeconds=void 0,t.onMessage=v,t.postMessage=l,t.removeStorageEventListener=d,t.storageKey=u,t.type=void 0;var n=r(151),o=r(423),i=r(202),a=i.microSeconds;t.microSeconds=a;var s="localstorage";function c(){var e;if("undefined"==typeof window)return null;try{e=window.localStorage,e=window["ie8-eventlistener/storage"]||window.localStorage}catch(e){}return e}function u(e){return"pubkey.broadcastChannel-"+e}function l(e,t){return new Promise((function(r){(0,i.sleep)().then((function(){var n=u(e.channelName),o={token:(0,i.randomToken)(),time:(new Date).getTime(),data:t,uuid:e.uuid},a=JSON.stringify(o);c().setItem(n,a);var s=document.createEvent("Event");s.initEvent("storage",!0,!0),s.key=n,s.newValue=a,window.dispatchEvent(s),r()}))}))}function f(e,t){var r=u(e),n=function(e){e.key===r&&t(JSON.parse(e.newValue))};return window.addEventListener("storage",n),n}function d(e){window.removeEventListener("storage",e)}function h(e,t){if(t=(0,o.fillOptionsWithDefaults)(t),!m())throw new Error("BroadcastChannel: localstorage cannot be used");var r=(0,i.randomToken)(),a=new n.ObliviousSet(t.localstorage.removeTimeout),s={channelName:e,uuid:r,eMIs:a};return s.listener=f(e,(function(e){s.messagesCallback&&e.uuid!==r&&e.token&&!a.has(e.token)&&(e.data.time&&e.data.time<s.messagesCallbackTime||(a.add(e.token),s.messagesCallback(e.data)))})),s}function p(e){d(e.listener)}function v(e,t,r){e.messagesCallbackTime=r,e.messagesCallback=t}function m(){if(i.isNode)return!1;var e=c();if(!e)return!1;try{var t="__broadcastchannel_check";e.setItem(t,"works"),e.removeItem(t)}catch(e){return!1}return!0}function y(){var e=navigator.userAgent.toLowerCase();return e.includes("safari")&&!e.includes("chrome")?240:120}t.type=s;var g={create:h,close:p,onMessage:v,postMessage:l,canBeUsed:m,type:s,averageResponseTime:y,microSeconds:a};t.default=g},115:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.averageResponseTime=f,t.canBeUsed=l,t.close=s,t.create=a,t.microSeconds=t.default=void 0,t.onMessage=u,t.postMessage=c,t.type=void 0;var n=r(202),o=n.microSeconds;t.microSeconds=o;var i="native";function a(e){var t={messagesCallback:null,bc:new BroadcastChannel(e),subFns:[]};return t.bc.onmessage=function(e){t.messagesCallback&&t.messagesCallback(e.data)},t}function s(e){e.bc.close(),e.subFns=[]}function c(e,t){try{return e.bc.postMessage(t,!1),n.PROMISE_RESOLVED_VOID}catch(e){return Promise.reject(e)}}function u(e,t){e.messagesCallback=t}function l(){if(n.isNode&&"undefined"==typeof window)return!1;if("function"==typeof BroadcastChannel){if(BroadcastChannel._pubkey)throw new Error("BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill");return!0}return!1}function f(){return 150}t.type=i;var d={create:a,close:s,onMessage:u,postMessage:c,canBeUsed:l,type:i,averageResponseTime:f,microSeconds:o};t.default=d},574:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.averageResponseTime=f,t.canBeUsed=l,t.close=s,t.create=a,t.microSeconds=t.default=void 0,t.onMessage=u,t.postMessage=c,t.type=void 0;var n=r(202).microSeconds;t.microSeconds=n;var o="simulate";t.type=o;var i=new Set;function a(e){var t={name:e,messagesCallback:null};return i.add(t),t}function s(e){i.delete(e)}function c(e,t){return new Promise((function(r){return setTimeout((function(){Array.from(i).filter((function(t){return t.name===e.name})).filter((function(t){return t!==e})).filter((function(e){return!!e.messagesCallback})).forEach((function(e){return e.messagesCallback(t)})),r()}),5)}))}function u(e,t){e.messagesCallback=t}function l(){return!0}function f(){return 5}var d={create:a,close:s,onMessage:u,postMessage:c,canBeUsed:l,type:o,averageResponseTime:f,microSeconds:n};t.default=d},423:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.fillOptionsWithDefaults=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=JSON.parse(JSON.stringify(e));return void 0===t.webWorkerSupport&&(t.webWorkerSupport=!0),t.idb||(t.idb={}),t.idb.ttl||(t.idb.ttl=45e3),t.idb.fallbackInterval||(t.idb.fallbackInterval=150),e.idb&&"function"==typeof e.idb.onclose&&(t.idb.onclose=e.idb.onclose),t.localstorage||(t.localstorage={}),t.localstorage.removeTimeout||(t.localstorage.removeTimeout=6e4),e.methods&&(t.methods=e.methods),t.node||(t.node={}),t.node.ttl||(t.node.ttl=12e4),t.node.maxParallelWrites||(t.node.maxParallelWrites=2048),void 0===t.node.useFastPath&&(t.node.useFastPath=!0),t}},202:(e,t,r)=>{"use strict";var n=r(155);Object.defineProperty(t,"__esModule",{value:!0}),t.isNode=t.PROMISE_RESOLVED_VOID=t.PROMISE_RESOLVED_TRUE=t.PROMISE_RESOLVED_FALSE=void 0,t.isPromise=function(e){return!(!e||"function"!=typeof e.then)},t.microSeconds=function(){var e=(new Date).getTime();return e===s?1e3*e+ ++c:(s=e,c=0,1e3*e)},t.randomInt=function(e,t){return Math.floor(Math.random()*(t-e+1)+e)},t.randomToken=function(){return Math.random().toString(36).substring(2)},t.sleep=function(e,t){return e||(e=0),new Promise((function(r){return setTimeout((function(){return r(t)}),e)}))};var o=Promise.resolve(!1);t.PROMISE_RESOLVED_FALSE=o;var i=Promise.resolve(!0);t.PROMISE_RESOLVED_TRUE=i;var a=Promise.resolve();t.PROMISE_RESOLVED_VOID=a;var s=0,c=0,u="[object process]"===Object.prototype.toString.call(void 0!==n?n:0);t.isNode=u},227:(e,t,r)=>{var n=r(155);t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;t.splice(1,0,r,"color: inherit");let n=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(n++,"%c"===e&&(o=n))})),t.splice(o,0,r)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=r(447)(t);const{formatters:o}=e.exports;o.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},447:(e,t,r)=>{e.exports=function(e){function t(e){let r,o,i,a=null;function s(...e){if(!s.enabled)return;const n=s,o=Number(new Date),i=o-(r||o);n.diff=i,n.prev=r,n.curr=o,r=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((r,o)=>{if("%%"===r)return"%";a++;const i=t.formatters[o];if("function"==typeof i){const t=e[a];r=i.call(n,t),e.splice(a,1),a--}return r})),t.formatArgs.call(n,e),(n.log||t.log).apply(n,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=n,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(o!==t.namespaces&&(o=t.namespaces,i=t.enabled(e)),i),set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function n(e,r){const n=t(this.namespace+(void 0===r?":":r)+e);return n.log=this.log,n}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let r;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),o=n.length;for(r=0;r<o;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=r(824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((r=>{t[r]=e[r]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return t.colors[Math.abs(r)%t.colors.length]},t.enable(t.load()),t}},643:e=>{e.exports=!1},824:e=>{var t=1e3,r=60*t,n=60*r,o=24*n;function i(e,t,r,n){var o=t>=1.5*r;return Math.round(e/r)+" "+n+(o?"s":"")}e.exports=function(e,a){a=a||{};var s,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*n;case"minutes":case"minute":case"mins":case"min":case"m":return a*r;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===u&&isFinite(e))return a.long?(s=e,(c=Math.abs(s))>=o?i(s,c,o,"day"):c>=n?i(s,c,n,"hour"):c>=r?i(s,c,r,"minute"):c>=t?i(s,c,t,"second"):s+" ms"):function(e){var i=Math.abs(e);return i>=o?Math.round(e/o)+"d":i>=n?Math.round(e/n)+"h":i>=r?Math.round(e/r)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},151:(e,t,r)=>{"use strict";r.r(t),r.d(t,{ObliviousSet:()=>n,now:()=>i,removeTooOldValues:()=>o});var n=function(){function e(e){this.ttl=e,this.set=new Set,this.timeMap=new Map}return e.prototype.has=function(e){return this.set.has(e)},e.prototype.add=function(e){var t=this;this.timeMap.set(e,i()),this.set.add(e),setTimeout((function(){o(t)}),0)},e.prototype.clear=function(){this.set.clear(),this.timeMap.clear()},e}();function o(e){for(var t=i()-e.ttl,r=e.set[Symbol.iterator]();;){var n=r.next().value;if(!n)return;if(!(e.timeMap.get(n)<t))return;e.timeMap.delete(n),e.set.delete(n)}}function i(){return(new Date).getTime()}},155:e=>{var t,r,n=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function i(){throw new Error("clearTimeout has not been defined")}function a(e){if(t===setTimeout)return setTimeout(e,0);if((t===o||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:o}catch(e){t=o}try{r="function"==typeof clearTimeout?clearTimeout:i}catch(e){r=i}}();var s,c=[],u=!1,l=-1;function f(){u&&s&&(u=!1,s.length?c=s.concat(c):l=-1,c.length&&d())}function d(){if(!u){var e=a(f);u=!0;for(var t=c.length;t;){for(s=c,c=[];++l<t;)s&&s[l].run();l=-1,t=c.length}s=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===i||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||u||a(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},279:e=>{function t(){}t.prototype={on:function(e,t,r){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:r}),this},once:function(e,t,r){var n=this;function o(){n.off(e,o),t.apply(r,arguments)}return o._=t,this.on(e,o,r)},emit:function(e){for(var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),n=0,o=r.length;n<o;n++)r[n].fn.apply(r[n].ctx,t);return this},off:function(e,t){var r=this.e||(this.e={}),n=r[e],o=[];if(n&&t)for(var i=0,a=n.length;i<a;i++)n[i].fn!==t&&n[i].fn._!==t&&o.push(n[i]);return o.length?r[e]=o:delete r[e],this}},e.exports=t,e.exports.TinyEmitter=t},797:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.assert=t.AssertError=void 0;var o=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return n(t,e),t}(Error);t.AssertError=o,t.assert=function(e,t,r){if(t(e))return e;throw new o(r)}},601:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SOURCE_NAMESPACE=void 0,t.SOURCE_NAMESPACE="ShimoBroadcastChannel"},758:function(e,t){"use strict";var r,n=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0}),t.InvokeError=t.MessageTimeoutError=t.MessageError=void 0;var o=function(e){function t(t){var r=e.call(this,t)||this;return r.name="MessageError",Object.setPrototypeOf(r,i.prototype),r}return n(t,e),t}(Error);t.MessageError=o;var i=function(e){function t(r){var n=e.call(this,r)||this;return n.name="MessageTimeoutError",Object.setPrototypeOf(n,t.prototype),n}return n(t,e),t}(Error);t.MessageTimeoutError=i;var a=function(e){function t(t){var r=e.call(this,t)||this;return r.name="InvokeError",Object.setPrototypeOf(r,i.prototype),r}return n(t,e),t}(Error);t.InvokeError=a},607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ShimoMessageEvent=t.isShimoMessageEventLike=t.ShimoBroadcastChannel=void 0;var a=i(r(586));t.ShimoBroadcastChannel=a.default;var s=r(928);Object.defineProperty(t,"isShimoMessageEventLike",{enumerable:!0,get:function(){return s.isShimoMessageEventLike}}),Object.defineProperty(t,"ShimoMessageEvent",{enumerable:!0,get:function(){return s.ShimoMessageEvent}}),o(r(928),t),o(r(586),t),o(r(758),t),o(r(86),t),o(r(601),t)},928:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isShimoMessageEventLike=t.ShimoMessageEvent=void 0;var n=r(131),o=r(797),i=r(601),a=function(e){var t=e.data,r=e.context,a=e.time,s=e.origin,c=e.emitter,u=e.channelId,l=Object.assign({},r,{channelId:u});"string"==typeof l.messageId&&""!==l.messageId.trim()||(l.messageId=(0,n.uuid)()),Object.defineProperties(this,{data:{enumerable:!0,value:t},context:{enumerable:!0,value:l},time:{enumerable:!0,value:null!=a?a:Date.now()},id:{enumerable:!0,get:function(){return l.messageId}},source:{enumerable:!0,value:i.SOURCE_NAMESPACE},origin:{enumerable:!0,value:s},emitter:{enumerable:!0,value:c},channelId:{enumerable:!0,get:function(){return l.channelId}}}),(0,o.assert)(this.context.channelId,(function(e){return"string"==typeof e&&e.length>0}),"channel id must be a non-empty string"),(0,o.assert)(this.id,(function(e){return"string"==typeof e&&e.length>0}),"id must be a non-empty string"),(0,o.assert)(this.time,(function(e){return"number"==typeof e&&e>=0}),"time must be a positive number")};t.ShimoMessageEvent=a,t.isShimoMessageEventLike=function(e){if(e instanceof a)return!0;if("object"==typeof e&&null!=e){var t=e;return t.source===i.SOURCE_NAMESPACE&&"string"==typeof t.channelId&&t.channelId.length>0&&null!=t.context}return!1}},586:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},i=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.ContextType=t.DEBUG_NAMESPACE=t.INVOKE_DEFAUTL_TIMEOUT=void 0;var s=r(437),c=r(279),u=r(797),l=r(758),f=r(928),d=r(86),h=a(r(227)),p=a(r(675)),v=r(131);t.INVOKE_DEFAUTL_TIMEOUT=6e4,t.DEBUG_NAMESPACE="SM_CHAN";var m,y=function(){function e(e){var r,i=this;this.invokeHandlers=new Map,this.eventHandlers=new Map,this.emitterId=(0,v.uuid)(),this._debugNamespace=t.DEBUG_NAMESPACE,this.debug=!0===e.debug,this.debugNamespace=null!==(r=e.debugNamespace)&&void 0!==r?r:t.DEBUG_NAMESPACE,this.autoStructuredClone=!0===e.autoStructuredClone,Object.defineProperty(this,"id",{enumerable:!0,value:"string"==typeof e.channelId?(0,u.assert)(e.channelId.trim(),(function(e){return e.length>0}),"channelId must be a non-empty string"):(0,v.uuid)()}),this.emitter=new c.TinyEmitter;var a=new s.BroadcastChannel(this.id,e.broadcastChannelOptions);a.addEventListener("message",(function(e){n(i,void 0,void 0,(function(){var t,r,n;return o(this,(function(o){switch(o.label){case 0:try{t=this.initMessageEvent(e)}catch(t){return(r=new l.MessageError(null!==(n=null==t?void 0:t.message)&&void 0!==n?n:"message cannot be handled")).originMessage=e.data,this.emit("messageError",r),[2]}return[4,this.distributeMessage(t)];case 1:return o.sent(),[2]}}))})).catch((function(e){return n(i,void 0,void 0,(function(){return o(this,(function(t){return this.emit("error",e),[2]}))}))}))})),this.channel=a}return e.prototype.initMessageEvent=function(e){var t=Object.assign({emitter:this.emitterId},e,{channelId:this.id});return"string"!=typeof t.origin&&(t.origin=location.origin),new f.ShimoMessageEvent(t)},e.prototype.structuredClone=function(e){return this.autoStructuredClone?(0,d.structuredClone)(e,{replacer:function(){}}):e},e.prototype.addEventListener=function(e,t,r){var n=this.eventHandlers.get(e);Array.isArray(n)||(n=[]),n.push([t,r]),this.eventHandlers.set(e,n)},e.prototype.on=function(e,t,r){var n=this;return this.addEventListener(e,t,r),function(){n.off(e,t,r)}},e.prototype.once=function(e,t,r){var n=this,o=function(r,o){n.off(e,t,o),t(r,o)};return o.handler=t,this.addEventListener(e,o,r),function(){n.off(e,t,r)}},e.prototype.off=function(e,t,r){if(1===arguments.length)this.eventHandlers.delete(e);else{var n=this.eventHandlers.get(e);Array.isArray(n)&&("*"===(null==r?void 0:r.audience)?this.eventHandlers.delete(e):this.eventHandlers.set(e,n.filter((function(e){var n=e[0],o=e[1];return n!==t&&n.handler!==t||(null==o?void 0:o.audience)===(null==r?void 0:r.audience)}))))}},e.prototype.emit=function(e,t,r){var n=this.eventHandlers.get(e);if(this.log("emit event",{name:e,data:t,context:r,handlers:n}),Array.isArray(n))for(var o=0,i=n;o<i.length;o++){var a=i[o],s=a[0];g(a[1],r)&&s(t,r)}},e.prototype.postMessage=function(e,t){return n(this,void 0,void 0,(function(){var r,n,i,a;return o(this,(function(o){switch(o.label){case 0:try{n=this.structuredClone(e),r=(0,f.isShimoMessageEventLike)(n)?this.initMessageEvent(n):this.initMessageEvent({data:n,context:null!=t?this.mergeContexts([t]):t})}catch(t){throw this.log("message invalid",e,t),(a=new l.MessageError(null==t?void 0:t.message)).originMessage=n,a}o.label=1;case 1:return o.trys.push([1,3,,4]),this.log("pre postMessage",{message:n,origin:e,context:t,structuredCloned:this.autoStructuredClone}),[4,this.channel.postMessage(r)];case 2:return o.sent(),this.emit("postMessage",r,r.context),this.log("postMessage success",r),[3,4];case 3:throw i=o.sent(),this.log("post message error",i),(a=new l.MessageError(null==i?void 0:i.message)).originMessage=e,a;case 4:return[2]}}))}))},e.prototype.distributeMessage=function(e){var t,r,i;return n(this,void 0,void 0,(function(){var n,a;return o(this,(function(o){switch(o.label){case 0:return(null===(t=(n=e).context)||void 0===t?void 0:t.channelId)!==this.id||n.emitter===this.emitterId?(this.log("discard message",n),[2]):"function"!=typeof this.onMessageArrive?[3,2]:[4,this.onMessageArrive(n)];case 1:if(!((a=o.sent())instanceof f.ShimoMessageEvent))return this.log("skip distributing message by `onMessageArrive`",{message:a,origin:e}),[2];n=a,o.label=2;case 2:return this.log("distribute message",{message:n,origin:e}),(null===(r=n.context)||void 0===r?void 0:r.type)!==m.InvokeRequest?[3,4]:[4,this.handleInvokeRequest(n)];case 3:return o.sent(),[2];case 4:return(null===(i=n.context)||void 0===i?void 0:i.type)===m.InvokeResponse?(this.handleInvokeResponse(n),[2]):(this.emit("message",n,n.context),[2])}}))}))},e.prototype.handleInvokeRequest=function(e){return n(this,void 0,void 0,(function(){var t,r,n,i,a,s,c,u,l,f,d;return o(this,(function(o){switch(o.label){case 0:if(!(0,p.default)(e.data))throw this.log("invalid invoke request",e),new Error("InvokeRequest data must be an object");if(t=e.data,r=t.name,n=t.args,i=this.invokeHandlers.get(r),this.log("handle invoke request",{message:e,handlers:i}),a=e.context,!Array.isArray(i)||0===i.length)return this.log("no invoke handlers",r),[2];s=0,c=i,o.label=1;case 1:if(!(s<c.length))return[3,8];if(!g((u=c[s]).context,a))return[3,7];l={data:void 0},o.label=2;case 2:return o.trys.push([2,4,,5]),f=l,[4,u.handler.apply(u,n)];case 3:return f.data=o.sent(),[3,5];case 4:return d=o.sent(),l.error=d,[3,5];case 5:return[4,this.postMessage(l,Object.assign({},a,{type:m.InvokeResponse}))];case 6:return o.sent(),[2];case 7:return s++,[3,1];case 8:return this.log("no invoke handler found",r),[2]}}))}))},e.prototype.handleInvokeResponse=function(e){if(this.log("handle invoke response",e),"string"!=typeof e.id)throw new l.InvokeError("Invoke response context id is invalid");this.emitter.emit(e.id,e.data)},e.prototype.mergeContexts=function(e){return Object.assign.apply(Object,i([{channelId:this.id}],e,!1))},e.prototype.invoke=function(e,r,i){return n(this,void 0,void 0,(function(){var n,a,s,c,u,f=this;return o(this,(function(o){switch(o.label){case 0:return n={name:e,args:r},a="number"==typeof(null==i?void 0:i.timeout)&&(null==i?void 0:i.timeout)>0?null==i?void 0:i.timeout:t.INVOKE_DEFAUTL_TIMEOUT,s=(0,v.uuid)(),c=new Promise((function(t,n){f.emitter.once(s,(function(o){if(o.error instanceof l.InvokeError)n(o.error);else if(null!=o.error){var i=new l.InvokeError("string"==typeof o.error?o.error:o.error.message);i.method=e,i.arguments=r,n(i)}else t(o.data)})),setTimeout((function(){f.emitter.off(s),n(new l.MessageTimeoutError("".concat(e," invoke timeout")))}),a)})),[4,this.postMessage(n,Object.assign({},i,{messageId:s,timeout:a,type:m.InvokeRequest}))];case 1:o.sent(),o.label=2;case 2:return o.trys.push([2,4,,5]),[4,c];case 3:return[2,o.sent()];case 4:throw u=o.sent(),this.log("invoke error",{id:s,name:e,args:r,payload:n,error:u}),u;case 5:return[2]}}))}))},e.prototype.addInvokeHandler=function(e,t,r){var n=this.invokeHandlers.get(e);Array.isArray(n)||(n=[]),n.push({handler:t,context:r}),this.invokeHandlers.set(e,n)},e.prototype.removeInvokeHandler=function(e,t,r){var n=this.invokeHandlers.get(e);Array.isArray(n)&&this.invokeHandlers.set(e,n.filter((function(e){var n;return e.handler!==t||(null===(n=e.context)||void 0===n?void 0:n.audience)!==(null==r?void 0:r.audience)})))},Object.defineProperty(e.prototype,"debug",{get:function(){return h.default.enabled(this._debugNamespace)},set:function(e){h.default.enable(e?this._debugNamespace:"-".concat(this._debugNamespace))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"debugNamespace",{get:function(){return this._debugNamespace},set:function(e){var t=this.debug;h.default.enable("-".concat(this._debugNamespace)),this.log=(0,h.default)(e),this._debugNamespace=e,t&&h.default.enable(e)},enumerable:!1,configurable:!0}),e}();function g(e,t){var r=null==e?void 0:e.audience,n=null==t?void 0:t.audience;return r===n||"*"===r||"*"===n}t.default=y,function(e){e[e.InvokeRequest=0]="InvokeRequest",e[e.InvokeResponse=1]="InvokeResponse"}(m=t.ContextType||(t.ContextType={}))},86:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.structuredClone=void 0;var o=n(r(675)),i=r(928);function a(e,t){try{return e instanceof t}catch(e){return!1}}t.structuredClone=function e(t,r){if(void 0===r&&(r={}),"string"==typeof t||"number"==typeof t||"boolean"==typeof t||null==t||t instanceof Date||t instanceof RegExp||t instanceof Boolean||t instanceof String||t instanceof i.ShimoMessageEvent)return t;try{for(var n=0,s=[window.ArrayBuffer,window.Map,window.Set,window.DataView,window.File,window.FileList,window.Blob,window.ImageBitmap,window.ImageData];n<s.length;n++)if(a(t,s[n]))return t}catch(e){}if((0,o.default)(t)){var c=t,u={};for(var l in c)!0===Object.prototype.hasOwnProperty.call(c,l)&&(u[l]=e(c[l],r));return u}if(Array.isArray(t))return t.map((function(t){return e(t,r)}));if(t instanceof Error)return t.message;try{if(t instanceof Object.getPrototypeOf(Uint8Array))return t}catch(e){}if("function"==typeof r.replacer){var f=Object.assign({},r);return f.replacer=void 0,e(r.replacer(t),f)}throw new Error("".concat(String(t)," could not be cloned"))}},131:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.uuid=void 0,t.uuid=function(){for(var e,t=[],r=(null!==(e=window.crypto)&&void 0!==e?e:window.msCrypto).getRandomValues(new Uint8Array(20)),n=0;n<r.length;n++)t.push(r[n].toString(16).padStart(2,"0"));for(var o=0,i=[4,7,10,13];o<i.length;o++)t[i[o]]="-";return t.join("")}},499:(e,t,r)=>{"use strict";r.r(t),r.d(t,{add:()=>f,getSize:()=>p,removeAll:()=>h,runAll:()=>d});var n=r(643),o=r.n(n);const i={add:function(e){if("function"==typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope);else{if("function"!=typeof window.addEventListener)return;window.addEventListener("beforeunload",(function(){e()}),!0),window.addEventListener("unload",(function(){e()}),!0)}}};var a=r(199),s=r.n(a),c=o()?s():i,u=new Set,l=!1;function f(e){if(l||(l=!0,c.add(d)),"function"!=typeof e)throw new Error("Listener is no function");return u.add(e),{remove:function(){return u.delete(e)},run:function(){return u.delete(e),e()}}}function d(){var e=[];return u.forEach((function(t){e.push(t()),u.delete(t)})),Promise.all(e)}function h(){u.clear()}function p(){return u.size}},199:()=>{},675:(e,t,r)=>{"use strict";function n(e){if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}r.r(t),r.d(t,{default:()=>n})}},t={};function r(n){var o=t[n];if(void 0!==o)return o.exports;var i=t[n]={exports:{}};return e[n].call(i.exports,i,i.exports,r),i.exports}return r.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return r.d(t,{a:t}),t},r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})(),e.exports=t()},3236:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},3381:function(e,t){"use strict";var r,n,o=this&&this.__values||function(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")},i=this&&this.__read||function(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,o,i=r.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(n=i.next()).done;)a.push(n.value)}catch(e){o={error:e}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return a};Object.defineProperty(t,"__esModule",{value:!0}),t.convertFileType=t.FileTypeAlias=t.FileType=void 0,function(e){e.DocumentPro="documentPro",e.Document="document",e.Spreadsheet="spreadsheet",e.Presentation="presentation",e.Table="table",e.Form="form",e.Unknown="unknown"}(n=t.FileType||(t.FileType={})),t.FileTypeAlias=((r={})[n.Document]="docs",r[n.DocumentPro]="docx",r[n.Spreadsheet]="sheets",r[n.Presentation]="presentation",r[n.Table]="table",r[n.Form]="form",r),t.convertFileType=function(e){var r,a,s,c;if("string"==typeof e){try{for(var u=o(Object.entries(n)),l=u.next();!l.done;l=u.next()){var f=i(l.value,2),d=f[0],h=f[1];if(d===e||h===e)return h}}catch(e){r={error:e}}finally{try{l&&!l.done&&(a=u.return)&&a.call(u)}finally{if(r)throw r.error}}try{for(var p=o(Object.entries(t.FileTypeAlias)),v=p.next();!v.done;v=p.next()){var m=i(v.value,2);if(d=m[0],(h=m[1])===e)return d}}catch(e){s={error:e}}finally{try{v&&!v.done&&(c=p.return)&&c.call(p)}finally{if(s)throw s.error}}}else switch(e){case-2:return n.Document;case-4:return n.Spreadsheet;case-6:return n.DocumentPro;case-8:return n.Form;case-10:return n.Presentation;case-11:return n.Table}return n.Unknown}},9504:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(2283),t),o(r(3236),t),o(r(3381),t)},2283:(e,t)=>{"use strict";var r,n,o,i;Object.defineProperty(t,"__esModule",{value:!0}),t.SDKEvent=t.UrlSharingType=t.ContainerMethod=t.InvokeMethod=t.ReadyState=void 0,(i=t.ReadyState||(t.ReadyState={})).Loading="loading",i.LoadingEditor="loadingEditor",i.Ready="ready",i.Failed="failed",(o=t.InvokeMethod||(t.InvokeMethod={})).SDKInit="SDKInit",o.Error="error",o.ReadyState="readyState",o.SetCredentials="setCredentials",o.InvokeContainerMethod="invokeContainerMethod",o.InvokeEditorMethod="invokeEditorMethod",o.DispatchSDKEvent="dispatchSDKEvent",o.DispatchEditorEvent="dispatchEditorEvent",o.ListenEditorEvent="listenEditorEvent",o.RequestPerformanceEntries="requestPerformanceEntries",(n=t.ContainerMethod||(t.ContainerMethod={})).GetContainerRect="getContainerRect",n.OpenLink="openLink",n.GenerateUrl="generateUrl",n.MentionClickHandlerForMobile="mentionClickHandlerForMobile",n.GetFileInfoFromUrl="getFileInfoFromUrl",n.ShowSignatureComponent="showSignatureComponent",(r=t.UrlSharingType||(t.UrlSharingType={})).Doc="doc",r.Docx="docx",r.Spreadsheet="sheet",r.Form="form",r.FormPreview="formPreview",r.FormFill="formFill",r.Presentation="presentation",(t.SDKEvent||(t.SDKEvent={})).ViewportResize="ViewportResize"},4207:function(e,t,r){"use strict";var n=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.StartParams=void 0;var o=n(r(1757)),i=n(r(9874)).default.createInstance(),a=function(){function e(t){if("string"==typeof t)return e.parse(t);if((0,o.default)(t))Object.assign(this,t);else if(t instanceof e)Object.assign(this,JSON.parse(JSON.stringify(t)));else if(Array.isArray(t))for(var r=0,n=t;r<n.length;r++){var i=n[r];"string"==typeof i?Object.assign(this,e.parse(i)):null!=i&&Object.assign(this,JSON.parse(JSON.stringify(i)))}null==this.fileGuid&&null!=this.guid&&(this.fileGuid=this.guid),null!=this.guid&&this.fileGuid!==this.guid&&(this.guid=this.fileGuid)}return e.parse=function(t){return new e(JSON.parse(i.decodeStr(t)))},e.prototype.toString=function(){return i.encodeStr(JSON.stringify(this))},e}();t.StartParams=a},3716:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r);var o=Object.getOwnPropertyDescriptor(t,r);o&&!("get"in o?!t.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,n,o)}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),o(r(4207),t)},1757:e=>{"use strict";e.exports=e=>{if("[object Object]"!==Object.prototype.toString.call(e))return!1;const t=Object.getPrototypeOf(e);return null===t||t===Object.prototype}},4279:e=>{function t(){}t.prototype={on:function(e,t,r){var n=this.e||(this.e={});return(n[e]||(n[e]=[])).push({fn:t,ctx:r}),this},once:function(e,t,r){var n=this;function o(){n.off(e,o),t.apply(r,arguments)}return o._=t,this.on(e,o,r)},emit:function(e){for(var t=[].slice.call(arguments,1),r=((this.e||(this.e={}))[e]||[]).slice(),n=0,o=r.length;n<o;n++)r[n].fn.apply(r[n].ctx,t);return this},off:function(e,t){var r=this.e||(this.e={}),n=r[e],o=[];if(n&&t)for(var i=0,a=n.length;i<a;i++)n[i].fn!==t&&n[i].fn._!==t&&o.push(n[i]);return o.length?r[e]=o:delete r[e],this}},e.exports=t,e.exports.TinyEmitter=t},7768:function(e,t,r){"use strict";var n,o=this&&this.__extends||(n=function(e,t){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])})(e,t)},function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}n(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,r=1,n=arguments.length;r<n;r++)for(var o in t=arguments[r])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},a=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))},s=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},c=this&&this.__spreadArray||function(e,t,r){if(r||2===arguments.length)for(var n,o=0,i=t.length;o<i;o++)!n&&o in t||(n||(n=Array.prototype.slice.call(t,0,o)),n[o]=t[o]);return e.concat(n||Array.prototype.slice.call(t))},u=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Event=t.ShimoSDK=t.MessageEvent=void 0,r(3867),r(1357),r(4577),r(7671),r(6522);var l=r(8390),f=r(3716),d=r(1614),h=r(4279),p=u(r(2168)),v=r(9504),m=u(r(6058)),y=r(4797),g=(0,p.default)(),b="smjssdk",w="smParams",C=["zh-CN","en","ja"];t.MessageEvent=v.InvokeMethod;var S,_=function(e){function t(t){var r,n,o,i=e.call(this)||this;i._fileType=v.FileType.Unknown,i.messageHandler=function(){},i.emitter=new h.TinyEmitter,i._readyState=v.ReadyState.Loading,i.connectOptions=t,i.uuid=(0,d.v4)(),(0,y.assert)(t.container,(function(e){return e instanceof HTMLElement}),'container is not an HTMLElement: "'.concat(String(t.container),'"')),(0,y.assert)(t.container,(function(e){return!["iframe","frame","embed","object"].includes(e.tagName.toLowerCase())}),'invalid container element type: "'.concat(t.container.tagName,'"，DIV are recommended.'));try{i.endpoint=new URL(t.endpoint)}catch(e){throw new Error('invalid endpoint: "'.concat(t.endpoint,'"'))}i.sameOrigin=i.endpoint.origin===g.location.origin,!1===/\/sdk\/v2\/*/i.test(i.endpoint.pathname)&&console.warn('Generally the endpoint should end with "/sdk/v2", please make sure it is correct: "'.concat(i.endpoint.toString(),'"')),i.apiAdaptor=t.apiAdaptor?t.apiAdaptor.toString():"",i.apiAdaptorContext=t.apiAdaptorContext?JSON.stringify(t.apiAdaptorContext):"";try{i.startParams=new f.StartParams(null!==(o=null!==(r=t.smParams)&&void 0!==r?r:new URLSearchParams(null===(n=g.location)||void 0===n?void 0:n.search).get(w))&&void 0!==o?o:"")}catch(e){i.startParams=new f.StartParams}"boolean"==typeof t.debug&&(i.startParams.debug=i.connectOptions.debug),i.onViewportResize=function(){a(i,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,this.channel.postMessage({event:v.SDKEvent.ViewportResize,payload:this.getContainerRect()})];case 1:return e.sent(),[2]}}))})).catch((function(e){i.emit("error",new Error("Failed to emit resize event: ".concat(String(e))))}))},i.initChannel();var c=t.messageExpires;return"number"!=typeof c&&(c=3e5),i.messageExpires=(0,y.assert)(c,(function(e){return!isNaN(e)&&e>0}),'"messageExpires" is not an valid number: "'.concat(c,'"')),i.handledMessageCache=new m.default(c),i.sameOrigin||(i.messageHandler=function(e){var t=e.data;(0,l.isShimoMessageEventLike)(t)&&i.shouldHandleMessage(t)&&(i.handledMessageCache.add(t.id),i.channel.distributeMessage(e.data).catch((function(e){i.emit("error",e)})))}),i}return o(t,e),Object.defineProperty(t.prototype,"fileType",{get:function(){return this._fileType},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"readyState",{get:function(){return this._readyState},enumerable:!1,configurable:!0}),t.prototype.getEditor=function(){return this.editor},t.prototype.setCredentials=function(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this.channel.invoke(v.InvokeMethod.SetCredentials,[e],{audience:b})];case 1:return t.sent(),[2]}}))}))},t.prototype.setSignature=function(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this.channel.invoke(v.InvokeMethod.SetCredentials,[{signature:e}],{audience:b})];case 1:return t.sent(),[2]}}))}))},t.prototype.setToken=function(e){return a(this,void 0,void 0,(function(){return s(this,(function(t){switch(t.label){case 0:return[4,this.channel.invoke(v.InvokeMethod.SetCredentials,[{token:e}],{audience:b})];case 1:return t.sent(),[2]}}))}))},t.prototype.getPerformanceEntries=function(){return a(this,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,this.channel.invoke(v.InvokeMethod.RequestPerformanceEntries,[],{audience:b})];case 1:return[2,e.sent()]}}))}))},t.prototype.disconnect=function(){var e;(null===(e=this.element)||void 0===e?void 0:e.parentElement)instanceof HTMLElement&&this.element.parentElement.removeChild(this.element),window.removeEventListener("message",this.messageHandler),window.visualViewport?window.visualViewport.removeEventListener("resize",this.onViewportResize):window.removeEventListener("resize",this.onViewportResize)},t.prototype.init=function(){return a(this,void 0,void 0,(function(){var e,t=this;return s(this,(function(r){switch(r.label){case 0:return this._readyState!==v.ReadyState.Loading?[2]:(this._readyState=v.ReadyState.LoadingEditor,this.sameOrigin||window.addEventListener("message",this.messageHandler),e=this,[4,this.initIframe()]);case 1:return e.element=r.sent(),this.connectOptions.container.appendChild(this.element),this.editor=this.initEditor(),[4,new Promise((function(e,r){var n=function(o){return a(t,void 0,void 0,(function(){var t,i,a,c;return s(this,(function(s){return t=o.state,i=o.error,a=o.fileType,this._readyState=t,a&&this._fileType===v.FileType.Unknown&&(this._fileType=a),c=!1,i?(c=!0,r("string"==typeof i?new Error(i):i)):t===v.ReadyState.Ready&&(c=!0,e(void 0)),c&&this.off(S.ReadyState,n),[2]}))}))};t.on(S.ReadyState,n)}))];case 2:switch(r.sent(),this.fileType){case v.FileType.Document:this.document=this.editor;break;case v.FileType.DocumentPro:this.documentPro=this.editor;break;case v.FileType.Spreadsheet:this.spreadsheet=this.editor;break;case v.FileType.Presentation:this.presentation=this.editor;break;case v.FileType.Table:this.table=this.editor;break;case v.FileType.Form:this.form=this.editor}return[2]}}))}))},t.prototype.initIframe=function(){var e;return a(this,void 0,void 0,(function(){var t,r,n,o,i,a;return s(this,(function(s){return t=this.connectOptions,(r=document.createElement("iframe")).style.border="none",r.style.overflow="hidden",r.style.width="100%",r.style.height="100%","allow"in r?r.allow=null!==(e=this.connectOptions.allowPolicy)&&void 0!==e?e:"fullscreen *;clipboard-read *;clipboard-write *;":r.allowFullscreen=!0,(n=this.endpoint).pathname="".concat(n.pathname,"/collab-files/").concat((0,y.assert)(t.fileId,E,'"fileId" is missing or empty: '.concat(t.fileId))).replace(/\/+/g,"/"),(o=t.params)&&Object.keys(o).forEach((function(e){n.searchParams.set(e,o[e])})),"string"==typeof t.deviceMode&&n.searchParams.set("deviceMode",t.deviceMode.trim()),n.searchParams.set(w,this.startParams.toString()),t.showLoadingEffect&&n.searchParams.set("loadingEffect","true"),"string"==typeof t.lang&&C.includes(t.lang)&&n.searchParams.set("lang",t.lang),n.searchParams.set("jsver",null!=="1.2.0"?"1.2.0":""),i=(0,y.assert)(t.token,E,'"token" is missing or empty: "'.concat(t.token,'"')),a=(0,y.assert)(t.signature,E,'"signature" is missing or empty: "'.concat(t.signature,'"')),n.searchParams.set("token",i),n.searchParams.set("signature",a),n.searchParams.set("uuid",this.uuid),r.src=n.toString(),[2,r]}))}))},t.prototype.initChannel=function(){var e=this,t=this.channel=new l.ShimoBroadcastChannel({channelId:this.startParams.channelId,debug:this.connectOptions.debug,autoStructuredClone:!0,debugNamespace:"SM_SDK_CHAN"});this.startParams.channelId||(this.startParams.channelId=t.id),t.on("error",(function(t){e.emit("error",t)})),t.on("messageError",(function(t){e.emit("error",t)})),this.sameOrigin||t.on("postMessage",(function(t){var r,n;null===(n=null===(r=e.element)||void 0===r?void 0:r.contentWindow)||void 0===n||n.postMessage(t,"*")}),{audience:"*"}),t.on("message",(function(t){var r=t.data;(null==r?void 0:r.event)===v.InvokeMethod.ReadyState&&e.emit(S.ReadyState,r.payload)}),{audience:b}),t.addInvokeHandler(v.InvokeMethod.Error,(function(t){e.emit(S.Error,t)}),{audience:b}),t.addInvokeHandler(v.InvokeMethod.SDKInit,(function(){return a(e,void 0,void 0,(function(){var e,t=this;return s(this,(function(r){return e={},Object.keys(this.connectOptions).forEach((function(r){var n=t.connectOptions[r];e[r]=n,"function"==typeof n&&(e["has".concat(r[0].toUpperCase()).concat(r.slice(1))]=!0)})),e.apiAdaptor=this.apiAdaptor,e.apiAdaptorContext=this.apiAdaptorContext,[2,i(i({},e),{uuid:this.uuid})]}))}))}),{audience:b}),t.addInvokeHandler(v.InvokeMethod.DispatchSDKEvent,(function(t,r){return a(e,void 0,void 0,(function(){return s(this,(function(e){return this.emit.apply(this,c([t],r,!1)),[2]}))}))}),{audience:b}),t.addInvokeHandler(v.InvokeMethod.DispatchEditorEvent,(function(t,r){return a(e,void 0,void 0,(function(){return s(this,(function(e){return this.emitter.emit(t,r),[2]}))}))}),{audience:b}),this.bindContainerMethodHandlers(),window.visualViewport?window.visualViewport.addEventListener("resize",this.onViewportResize):window.addEventListener("resize",this.onViewportResize)},t.prototype.bindContainerMethodHandlers=function(){var e=this,t=this.channel;t.addInvokeHandler(v.ContainerMethod.GenerateUrl,(function(t,r){return a(e,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:if("function"!=typeof this.connectOptions.generateUrl)throw new Error('"'.concat(v.ContainerMethod.GenerateUrl,'" not found'));return[4,Promise.resolve(this.connectOptions.generateUrl(t,r))];case 1:return[2,e.sent()]}}))}))}),{audience:b}),t.addInvokeHandler(v.ContainerMethod.OpenLink,(function(t,r){return a(e,void 0,void 0,(function(){return s(this,(function(e){if("function"!=typeof this.connectOptions.openLink)throw new Error('"'.concat(v.ContainerMethod.OpenLink,'" not found'));return this.connectOptions.openLink(t,r),[2]}))}))}),{audience:b}),t.addInvokeHandler(v.ContainerMethod.GetFileInfoFromUrl,(function(t){return a(e,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:if(null==this.connectOptions.getFileInfoFromUrl)return[2];if("function"!=typeof this.connectOptions.getFileInfoFromUrl)throw new Error('"'.concat(v.ContainerMethod.GetFileInfoFromUrl,'" not a function'));return[4,this.connectOptions.getFileInfoFromUrl(t)];case 1:return[2,e.sent()]}}))}))}),{audience:b}),t.addInvokeHandler(v.ContainerMethod.MentionClickHandlerForMobile,(function(t){return a(e,void 0,void 0,(function(){var e;return s(this,(function(r){if("function"!=typeof this.connectOptions.mentionClickHandlerForMobile)throw new Error('"'.concat(v.ContainerMethod.MentionClickHandlerForMobile,'" not found'));return"object"==typeof t&&null!=t&&(e=this.element.getBoundingClientRect(),t.x+=e.x,t.y+=e.y,t.isMention&&(t.mentionInfo.left+=e.x,t.mentionInfo.top+=e.y)),this.connectOptions.mentionClickHandlerForMobile(t),[2]}))}))}),{audience:b}),t.addInvokeHandler(v.ContainerMethod.GetContainerRect,(function(){return a(e,void 0,void 0,(function(){return s(this,(function(e){return[2,this.getContainerRect()]}))}))}),{audience:b})},t.prototype.initEditor=function(){var e=this,t=function(e){return"saveStatusDidChange"===e?"saveStatusChanged":e};return new Proxy({on:function(r,n){return a(e,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return r=t(r),this.emitter.on(r,n),[4,this.channel.invoke(v.InvokeMethod.ListenEditorEvent,[r],{audience:b})];case 1:return e.sent(),[2]}}))}))},off:function(r,n){r=t(r),e.emitter.off(r,n)}},{get:function(t,r){return!0===Object.prototype.hasOwnProperty.call(t,r)?t[r]:"string"==typeof r?function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return a(e,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,this.channel.invoke(v.InvokeMethod.InvokeEditorMethod,[r,t],{audience:b})];case 1:return[2,e.sent()]}}))}))}:t[r]}})},t.prototype.shouldHandleMessage=function(e){return!(e.channelId!==this.channel.id||e.time+this.messageExpires<Date.now()||this.handledMessageCache.has(e.context.messageId))},t.prototype.getContainerRect=function(){var e,t=this.element.getBoundingClientRect(),r={viewportWidth:window.innerWidth,viewportHeight:window.innerHeight,top:t.top,left:t.left,bottom:t.bottom,right:t.right,scrollTop:null===(e=document.scrollingElement)||void 0===e?void 0:e.scrollTop,visualViewport:{}};return window.visualViewport&&(r.visualViewport={width:window.visualViewport.width,height:window.visualViewport.height,offsetLeft:window.visualViewport.offsetLeft,offsetTop:window.visualViewport.offsetTop,pageLeft:window.visualViewport.pageLeft,pageTop:window.visualViewport.pageTop,scale:window.visualViewport.scale}),r},t}(h.TinyEmitter);function E(e){return"string"==typeof e&&e.trim().length>0}t.ShimoSDK=_,function(e){e.SDKInit="SDKInit",e.Error="error",e.ReadyState="readyState",e.EditorEvent="editorEvent"}(S=t.Event||(t.Event={}))},4797:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assert=void 0,t.assert=function(e,t,r){if(t(e))return e;throw new Error(r)}},1262:function(e,t,r){"use strict";var n=this&&this.__awaiter||function(e,t,r,n){return new(r||(r=Promise))((function(o,i){function a(e){try{c(n.next(e))}catch(e){i(e)}}function s(e){try{c(n.throw(e))}catch(e){i(e)}}function c(e){var t;e.done?o(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(a,s)}c((n=n.apply(e,t||[])).next())}))},o=this&&this.__generator||function(e,t){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(o=2&i[0]?n.return:i[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,i[1])).done)return o;switch(n=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,n=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],n=0}finally{r=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.connect=void 0;var i=r(7768);t.connect=function(e){return n(this,void 0,void 0,(function(){var t,r;return o(this,(function(n){switch(n.label){case 0:return n.trys.push([0,2,,3]),[4,(t=new i.ShimoSDK(e)).init()];case 1:return n.sent(),[2,t];case 2:throw r=n.sent(),console.log("Failed to init ShimoSDK",{error:r,options:e}),r;case 3:return[2]}}))}))}},3607:function(e,t,r){"use strict";var n=this&&this.__createBinding||(Object.create?function(e,t,r,n){void 0===n&&(n=r),Object.defineProperty(e,n,{enumerable:!0,get:function(){return t[r]}})}:function(e,t,r,n){void 0===n&&(n=r),e[n]=t[r]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)"default"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&n(t,e,r);return o(t,e),t},a=this&&this.__exportStar||function(e,t){for(var r in e)"default"===r||Object.prototype.hasOwnProperty.call(t,r)||n(t,e,r)};Object.defineProperty(t,"__esModule",{value:!0}),t.START_PARAMS_FIELD=t.Form=t.Table=t.Presentation=t.Spreadsheet=t.Document=t.DocumentPro=void 0;var s=i(r(1532));t.DocumentPro=s;var c=i(r(6862));t.Document=c;var u=i(r(1476));t.Spreadsheet=u;var l=i(r(9668));t.Presentation=l;var f=i(r(6401));t.Table=f;var d=i(r(4803));t.Form=d,a(r(9504),t),a(r(1262),t),a(r(7768),t),t.START_PARAMS_FIELD="smParams"},6862:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1532:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},4803:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},9668:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1476:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},6401:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0})},1614:(e,t,r)=>{"use strict";var n;r.r(t),r.d(t,{NIL:()=>k,parse:()=>m,stringify:()=>l,v1:()=>v,v3:()=>O,v4:()=>x,v5:()=>M,validate:()=>s,version:()=>j});var o=new Uint8Array(16);function i(){if(!n&&!(n="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return n(o)}const a=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i,s=function(e){return"string"==typeof e&&a.test(e)};for(var c=[],u=0;u<256;++u)c.push((u+256).toString(16).substr(1));const l=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,r=(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase();if(!s(r))throw TypeError("Stringified UUID is invalid");return r};var f,d,h=0,p=0;const v=function(e,t,r){var n=t&&r||0,o=t||new Array(16),a=(e=e||{}).node||f,s=void 0!==e.clockseq?e.clockseq:d;if(null==a||null==s){var c=e.random||(e.rng||i)();null==a&&(a=f=[1|c[0],c[1],c[2],c[3],c[4],c[5]]),null==s&&(s=d=16383&(c[6]<<8|c[7]))}var u=void 0!==e.msecs?e.msecs:Date.now(),v=void 0!==e.nsecs?e.nsecs:p+1,m=u-h+(v-p)/1e4;if(m<0&&void 0===e.clockseq&&(s=s+1&16383),(m<0||u>h)&&void 0===e.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");h=u,p=v,d=s;var y=(1e4*(268435455&(u+=122192928e5))+v)%4294967296;o[n++]=y>>>24&255,o[n++]=y>>>16&255,o[n++]=y>>>8&255,o[n++]=255&y;var g=u/4294967296*1e4&268435455;o[n++]=g>>>8&255,o[n++]=255&g,o[n++]=g>>>24&15|16,o[n++]=g>>>16&255,o[n++]=s>>>8|128,o[n++]=255&s;for(var b=0;b<6;++b)o[n+b]=a[b];return t||l(o)},m=function(e){if(!s(e))throw TypeError("Invalid UUID");var t,r=new Uint8Array(16);return r[0]=(t=parseInt(e.slice(0,8),16))>>>24,r[1]=t>>>16&255,r[2]=t>>>8&255,r[3]=255&t,r[4]=(t=parseInt(e.slice(9,13),16))>>>8,r[5]=255&t,r[6]=(t=parseInt(e.slice(14,18),16))>>>8,r[7]=255&t,r[8]=(t=parseInt(e.slice(19,23),16))>>>8,r[9]=255&t,r[10]=(t=parseInt(e.slice(24,36),16))/1099511627776&255,r[11]=t/4294967296&255,r[12]=t>>>24&255,r[13]=t>>>16&255,r[14]=t>>>8&255,r[15]=255&t,r};function y(e,t,r){function n(e,n,o,i){if("string"==typeof e&&(e=function(e){e=unescape(encodeURIComponent(e));for(var t=[],r=0;r<e.length;++r)t.push(e.charCodeAt(r));return t}(e)),"string"==typeof n&&(n=m(n)),16!==n.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");var a=new Uint8Array(16+e.length);if(a.set(n),a.set(e,n.length),(a=r(a))[6]=15&a[6]|t,a[8]=63&a[8]|128,o){i=i||0;for(var s=0;s<16;++s)o[i+s]=a[s];return o}return l(a)}try{n.name=e}catch(e){}return n.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",n.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",n}function g(e){return 14+(e+64>>>9<<4)+1}function b(e,t){var r=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(r>>16)<<16|65535&r}function w(e,t,r,n,o,i){return b((a=b(b(t,e),b(n,i)))<<(s=o)|a>>>32-s,r);var a,s}function C(e,t,r,n,o,i,a){return w(t&r|~t&n,e,t,o,i,a)}function S(e,t,r,n,o,i,a){return w(t&n|r&~n,e,t,o,i,a)}function _(e,t,r,n,o,i,a){return w(t^r^n,e,t,o,i,a)}function E(e,t,r,n,o,i,a){return w(r^(t|~n),e,t,o,i,a)}const O=y("v3",48,(function(e){if("string"==typeof e){var t=unescape(encodeURIComponent(e));e=new Uint8Array(t.length);for(var r=0;r<t.length;++r)e[r]=t.charCodeAt(r)}return function(e){for(var t=[],r=32*e.length,n="0123456789abcdef",o=0;o<r;o+=8){var i=e[o>>5]>>>o%32&255,a=parseInt(n.charAt(i>>>4&15)+n.charAt(15&i),16);t.push(a)}return t}(function(e,t){e[t>>5]|=128<<t%32,e[g(t)-1]=t;for(var r=1732584193,n=-271733879,o=-1732584194,i=271733878,a=0;a<e.length;a+=16){var s=r,c=n,u=o,l=i;r=C(r,n,o,i,e[a],7,-680876936),i=C(i,r,n,o,e[a+1],12,-389564586),o=C(o,i,r,n,e[a+2],17,606105819),n=C(n,o,i,r,e[a+3],22,-1044525330),r=C(r,n,o,i,e[a+4],7,-176418897),i=C(i,r,n,o,e[a+5],12,1200080426),o=C(o,i,r,n,e[a+6],17,-1473231341),n=C(n,o,i,r,e[a+7],22,-45705983),r=C(r,n,o,i,e[a+8],7,1770035416),i=C(i,r,n,o,e[a+9],12,-1958414417),o=C(o,i,r,n,e[a+10],17,-42063),n=C(n,o,i,r,e[a+11],22,-1990404162),r=C(r,n,o,i,e[a+12],7,1804603682),i=C(i,r,n,o,e[a+13],12,-40341101),o=C(o,i,r,n,e[a+14],17,-1502002290),r=S(r,n=C(n,o,i,r,e[a+15],22,1236535329),o,i,e[a+1],5,-165796510),i=S(i,r,n,o,e[a+6],9,-1069501632),o=S(o,i,r,n,e[a+11],14,643717713),n=S(n,o,i,r,e[a],20,-373897302),r=S(r,n,o,i,e[a+5],5,-701558691),i=S(i,r,n,o,e[a+10],9,38016083),o=S(o,i,r,n,e[a+15],14,-660478335),n=S(n,o,i,r,e[a+4],20,-405537848),r=S(r,n,o,i,e[a+9],5,568446438),i=S(i,r,n,o,e[a+14],9,-1019803690),o=S(o,i,r,n,e[a+3],14,-187363961),n=S(n,o,i,r,e[a+8],20,1163531501),r=S(r,n,o,i,e[a+13],5,-1444681467),i=S(i,r,n,o,e[a+2],9,-51403784),o=S(o,i,r,n,e[a+7],14,1735328473),r=_(r,n=S(n,o,i,r,e[a+12],20,-1926607734),o,i,e[a+5],4,-378558),i=_(i,r,n,o,e[a+8],11,-2022574463),o=_(o,i,r,n,e[a+11],16,1839030562),n=_(n,o,i,r,e[a+14],23,-35309556),r=_(r,n,o,i,e[a+1],4,-1530992060),i=_(i,r,n,o,e[a+4],11,1272893353),o=_(o,i,r,n,e[a+7],16,-155497632),n=_(n,o,i,r,e[a+10],23,-1094730640),r=_(r,n,o,i,e[a+13],4,681279174),i=_(i,r,n,o,e[a],11,-358537222),o=_(o,i,r,n,e[a+3],16,-722521979),n=_(n,o,i,r,e[a+6],23,76029189),r=_(r,n,o,i,e[a+9],4,-640364487),i=_(i,r,n,o,e[a+12],11,-421815835),o=_(o,i,r,n,e[a+15],16,530742520),r=E(r,n=_(n,o,i,r,e[a+2],23,-995338651),o,i,e[a],6,-198630844),i=E(i,r,n,o,e[a+7],10,1126891415),o=E(o,i,r,n,e[a+14],15,-1416354905),n=E(n,o,i,r,e[a+5],21,-57434055),r=E(r,n,o,i,e[a+12],6,1700485571),i=E(i,r,n,o,e[a+3],10,-1894986606),o=E(o,i,r,n,e[a+10],15,-1051523),n=E(n,o,i,r,e[a+1],21,-2054922799),r=E(r,n,o,i,e[a+8],6,1873313359),i=E(i,r,n,o,e[a+15],10,-30611744),o=E(o,i,r,n,e[a+6],15,-1560198380),n=E(n,o,i,r,e[a+13],21,1309151649),r=E(r,n,o,i,e[a+4],6,-145523070),i=E(i,r,n,o,e[a+11],10,-1120210379),o=E(o,i,r,n,e[a+2],15,718787259),n=E(n,o,i,r,e[a+9],21,-343485551),r=b(r,s),n=b(n,c),o=b(o,u),i=b(i,l)}return[r,n,o,i]}(function(e){if(0===e.length)return[];for(var t=8*e.length,r=new Uint32Array(g(t)),n=0;n<t;n+=8)r[n>>5]|=(255&e[n/8])<<n%32;return r}(e),8*e.length))})),x=function(e,t,r){var n=(e=e||{}).random||(e.rng||i)();if(n[6]=15&n[6]|64,n[8]=63&n[8]|128,t){r=r||0;for(var o=0;o<16;++o)t[r+o]=n[o];return t}return l(n)};function A(e,t,r,n){switch(e){case 0:return t&r^~t&n;case 1:return t^r^n;case 2:return t&r^t&n^r&n;case 3:return t^r^n}}function P(e,t){return e<<t|e>>>32-t}const M=y("v5",80,(function(e){var t=[1518500249,1859775393,2400959708,3395469782],r=[1732584193,4023233417,2562383102,271733878,3285377520];if("string"==typeof e){var n=unescape(encodeURIComponent(e));e=[];for(var o=0;o<n.length;++o)e.push(n.charCodeAt(o))}else Array.isArray(e)||(e=Array.prototype.slice.call(e));e.push(128);for(var i=e.length/4+2,a=Math.ceil(i/16),s=new Array(a),c=0;c<a;++c){for(var u=new Uint32Array(16),l=0;l<16;++l)u[l]=e[64*c+4*l]<<24|e[64*c+4*l+1]<<16|e[64*c+4*l+2]<<8|e[64*c+4*l+3];s[c]=u}s[a-1][14]=8*(e.length-1)/Math.pow(2,32),s[a-1][14]=Math.floor(s[a-1][14]),s[a-1][15]=8*(e.length-1)&4294967295;for(var f=0;f<a;++f){for(var d=new Uint32Array(80),h=0;h<16;++h)d[h]=s[f][h];for(var p=16;p<80;++p)d[p]=P(d[p-3]^d[p-8]^d[p-14]^d[p-16],1);for(var v=r[0],m=r[1],y=r[2],g=r[3],b=r[4],w=0;w<80;++w){var C=Math.floor(w/20),S=P(v,5)+A(C,m,y,g)+b+t[C]+d[w]>>>0;b=g,g=y,y=P(m,30)>>>0,m=v,v=S}r[0]=r[0]+v>>>0,r[1]=r[1]+m>>>0,r[2]=r[2]+y>>>0,r[3]=r[3]+g>>>0,r[4]=r[4]+b>>>0}return[r[0]>>24&255,r[0]>>16&255,r[0]>>8&255,255&r[0],r[1]>>24&255,r[1]>>16&255,r[1]>>8&255,255&r[1],r[2]>>24&255,r[2]>>16&255,r[2]>>8&255,255&r[2],r[3]>>24&255,r[3]>>16&255,r[3]>>8&255,255&r[3],r[4]>>24&255,r[4]>>16&255,r[4]>>8&255,255&r[4]]})),k="00000000-0000-0000-0000-000000000000",j=function(e){if(!s(e))throw TypeError("Invalid UUID");return parseInt(e.substr(14,1),16)}}},t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}return r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(3607)})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,